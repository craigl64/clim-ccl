;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Package: CLIM-INTERNALS; Base: 10; Lowercase: Yes -*-
;; See the file LICENSE for the full license governing this code.
;;

(in-package :clim-internals)

;;;"Copyright (c) 1990, 1991, 1992 Symbolics, Inc.  All rights reserved."

;;; This file prefills generic function dispatch caches at load time so that
;;; there won't be so much delay starting things up the first time the application
;;; is run.

;;; The first page of this file contains commented-out functions for gathering the
;;; necessary information.  The second page contains the prefill mechanism.  The
;;; third page contains calls to the prefill mechanism, generated by running the
;;; commented-out functions after running the usual CLIM demos on both Genera and
;;; Cloe, in CLIM II and then manually massaging the results.  The file
;;; CLIM:DEMO;DEMO-PREFILL contains additional prefills specific to the demos.


#||

()

;; Exercise the system with a synthetic load (i.e. run demos) and then
;; call this function to produce calls to PREFILL-DISPATCH-CACHES
;; corresponding to what has actually been called.  You can also call
;; the function GENERATE-PREFILL-DISPATCH-CACHES on whatever classes you
;; deem interesting.  This only works in Symbolics Genera and Cloe.

(defvar *method-hash-table* (scl:make-hash-table :test #'equal :number-of-values 1))

(defun generate-all-prefill-dispatch-caches (&optional file)
  (clrhash *method-hash-table*)
  (if file
      (with-open-file (*standard-output* file :direction :output)
        (generate-all-prefill-dispatch-caches))
      (let ((*print-pretty* t)
            (*print-length* nil)
            (*print-level* nil))
        (flet ((print-form (form result)
                 (format t "~2%;;; ~(~S~)~2%" form)
                 (format t "(~S" (first result))
                 (dolist (generic (rest result))
                   (format t "~%  (~S" (first generic))
                   (dolist (method (rest generic))
                     (format t "~%    ~S" method))
                   (format t ")"))
                 (format t ")")))
          (dolist (base-class '(;; These first to "shadow" them later
                                genera-clim::genera-medium
                                genera-clim::genera-port
                                clx-clim::clx-medium
                                clx-clim::clx-port
  
                                transformation
  
                                ;; This gets us output records, too
                                bounding-rectangle
                                design
                                line-style
                                text-style
  
                                ;; More general Silica stuff
                                sheet
                                medium
                                port
  
                                ;; Now the stream-oid stuff
                                fundamental-stream
                                encapsulating-stream
  
                                pointer
                                console
                                cursor
  
                                event
  
                                application-frame
                                frame-manager
                                command-table
  
                                presentation-translator
                                view
                                accept-values-query
                                basic-history
  
                                noise-string
                                io-buffer
                                queue))
            (print-form `(generate-prefill-dispatch-caches ',base-class)
                        (generate-prefill-dispatch-caches base-class)))
          ;; This is only the presentation types that I think all applications use
          (dolist (base-class '(command command-name command-arguments keyword-argument-name
                                command-or-form expression form
                                command-menu-element menu-item
                                completion subset-completion sequence null blank-area))
            (print-form `(generate-prefill-dispatch-caches
                           (find-presentation-type-class ',base-class))
                        (generate-prefill-dispatch-caches
                          (find-presentation-type-class base-class)))))))
  file)

(defun generate-prefill-dispatch-caches (class-name)
  (let ((generic-functions nil)
        (classes nil))
    (clos-internals::map-over-class-and-its-subclasses class-name
      #'(lambda (class)
          (pushnew (class-name class) classes)
          (clos-internals::map-over-dispatch-table
            #'(lambda (selector handler extra-argument)
                (typecase selector
                  (cons
                    (pushnew (first selector) generic-functions))
                  (clos-internals::generic-function-selector
                    (when (clos-internals::generic-function-clos selector)
                      (pushnew (clos-internals::funcallable-instance-from-generic-selector
                                 selector)
                               generic-functions)))
                  (otherwise))
                (values selector handler extra-argument))
            (clos-internals::%instance-information-dispatch-table
              (clos-internals::class-instance-information class)))))
    (setq generic-functions (sort generic-functions
                                  #'(lambda (x y)
                                      (setq x (clos:generic-function-name x)
                                            y (clos:generic-function-name y))
                                      (let ((xx (if (atom x) x (second x)))
                                            (yy (if (atom y) y (second y))))
                                        (if (eq xx yy)
                                            (or (atom x)
                                                (and (consp y)
                                                     (string<= (first x) (first y))))
                                            (string<= xx yy))))))
    `(prefill-dispatch-caches
      ,@(mapcar
         #'(lambda (generic-function)
             (let ((nargs
                    (length (clos-internals::dispatching-funcallable-instance-precedence-order
                              generic-function)))
                   (calls nil))
               (labels 
                 ((mapper (dispatch handler extra-argument state &rest arguments)
                    (declare (dynamic-extent arguments))
                    (ecase (clos-internals::dispatch-type dispatch)
                      (clos-internals::class-dispatch
                        (apply #'clos-internals::generic-function-map-over-dispatch
                               generic-function handler extra-argument state
                               #'mapper
                               (clos-internals::class-dispatch-position dispatch)
                               (class-name
                                 (clos-internals::class-dispatch-class dispatch))
                               arguments))
                      (clos-internals::eql-dispatch
                        (let ((key-or-nil
                                (clos-internals::eql-dispatch-key-or-nil dispatch)))
                          (when key-or-nil
                            (apply #'clos-internals::generic-function-map-over-dispatch
                                   generic-function handler extra-argument state
                                   #'mapper
                                   (clos-internals::eql-dispatch-position dispatch)
                                   `(eql ,(cond ((eq key-or-nil +foreground-ink+)
                                                 `+foreground-ink+)
                                                ((eq key-or-nil +background-ink+)
                                                 `+background-ink+)
                                                ((eq key-or-nil +everywhere+)
                                                 `+everywhere+)
                                                ((eq key-or-nil +nowhere+)
                                                 `+nowhere+)
                                                ((eq key-or-nil +flipping-ink+)
                                                 `+flipping-ink+)
                                                ((typep key-or-nil '(or number
                                                                        character
                                                                        (member t nil)
                                                                        keyword))
                                                 key-or-nil)
                                                (t `',key-or-nil)))
                                   arguments))))
                      (clos-internals::finish-dispatch
                        (when (do ((l arguments (cddr l)))
                                  ((null l) nil)
                                (when (member (second l) classes)
                                  (return t)))
                          (let ((pattern 
                                  (do ((i (1- nargs) (1- i))
                                       (l nil))
                                      ((< i 0) l)
                                    (push (getf arguments i 't) l))))
                            (unless (gethash (cons generic-function pattern)
                                             *method-hash-table*)
                              (setf (gethash (cons generic-function pattern)
                                             *method-hash-table*)
                                    t)
                              (pushnew pattern calls
                                       :test #'equal))))))
                    (values handler extra-argument)))
                   (clos-internals::map-over-generic-function-computed-dispatches
                     generic-function #'mapper)
                   `(,(clos:generic-function-name generic-function)
                     ,@calls))))
           generic-functions))))
||#

;;; Prefill dispatch caches for a bunch of generic function calls
(defmacro prefill-dispatch-caches (&body clauses &environment env)
  (let (function)
    (labels ((expand-clause (clause)
               (setq function (car clause))
               (unless (clos-internals::fboundp-in-environment function env)
                 #+++ignore        ;until we fix CLOS
                 (warn "prefill-dispatch-caches: ~S is not a defined generic function."
                       function))
               `(progn ,@(mapcar #'expand-call (cdr clause))))
             (expand-call (args)
               (dolist (arg args)
                 (unless (cond ((atom arg) (find-class arg nil env))
                               ((eq (first arg) 'eql) t)
                               ((eq (first arg) 'presentation-type)
                                (find-presentation-type-class (second arg) nil env)))
                   #+++ignore        ;until we fix CLOS
                   (warn "prefill-dispatch-caches: ~S is not a valid specializer in the ~
                          arguments to ~S."
                         arg function)))
               `(prefill-dispatch-caches-1
                  ',function
                 ,(if (some #'needs-evaluation args)
                      `(list ,@(mapcar #'(lambda (arg)
                                           (if (and (consp arg) (eq (first arg) 'eql))
                                               ``(eql ,,(second arg))
                                               ``,',arg))
                                       args))
                      `',(mapcar #'(lambda (arg)
                                     (if (and (consp arg) (eq (first arg) 'eql))
                                         `(eql ,(eval (second arg)))
                                         arg))
                                 args))))
             (needs-evaluation (arg)
               (and (consp arg)
                    (eq (first arg) 'eql)
                    (not (if (consp (second arg))
                             (eq (first (second arg)) 'quote)
                             (typep (second arg)
                                    '(or number character keyword (member t nil))))))))
      `(progn ,@(mapcar #'expand-clause clauses)))))

(defun prefill-dispatch-caches-1 (&rest calls)
  (declare (dynamic-extent calls))
  (dorest (calls calls cddr)
    (let ((generic-function
            (and (clos-internals::fboundp-in-environment (first calls) nil)
                 (clos-internals::fdefinition-in-environment (first calls) nil)))
          (arguments (mapcar #'(lambda (arg)
                                 (setq arg (cond ((atom arg) (find-class arg))
                                                 ((eq (first arg) 'eql) arg)
                                                 ((eq (first arg) 'presentation-type)
                                                  (find-presentation-type-class (second arg)))
                                                 (t
                                                  (error "Invalid argument specification: ~S"
                                                         arg))))
                                 (when (typep arg 'class)
                                   (unless (clos-internals::class-finalized-p arg)
                                     (clos-internals::finalize-inheritance arg)))
                                 arg)
                             (second calls))))
      (unless (typep generic-function 'generic-function)
        (error "~S is not a defined generic function." (first calls)))
      #+Symbolics                                ;Symbolics CLOS, that is
      (clos-internals::generic-function-ensure-specializers-mapped
        generic-function arguments #'clos-internals::standard-method-combiner)
      #-Symbolics
      (error "I don't know how to prefill generic function dispatch caches except in Symbolics CLOS"))))


;;; Ensure constructors are compiled for a bunch of classes
(defmacro ensure-constructors-compiled (&body class-names)
  `(ensure-constructors-compiled-1 '(,@class-names)))

(defun ensure-constructors-compiled-1 (class-names)
  (dolist (class-name class-names)
    (let ((class (find-class class-name)))
      (clos-internals::finalize-inheritance class)
      (when (and (slot-exists-p class 'clos-internals::constructors)
                 (clos-internals::class-finalized-p class))
          (map nil #'clos-internals::ensure-constructor-function
                   (clos-internals::class-constructors class))))))


;;; This page contains the non-demo-specific results after running the demos in
;;; both Genera and Cloe.  Some things have been commented out since they didn't
;;; seem important, machine-dependent things have been conditionalized, and
;;; demo-specific things have been moved to the demo specific file.  Otherwise
;;; the only hand-massaging was to standardize the pretty printing and remove
;;; some duplicate entries and things only used when printing internal objects.

;;; (generate-prefill-dispatch-caches 'transformation)

(prefill-dispatch-caches
  (compose-transformations
    (identity-transformation translation-transformation)
    (identity-transformation standard-transformation)
    (identity-transformation identity-transformation)
    (translation-transformation translation-transformation)
    (translation-transformation standard-transformation)
    (translation-transformation identity-transformation)
    (standard-transformation standard-transformation))
  (compose-translation-with-transformation
    (identity-transformation t t)
    (translation-transformation t t))
  (describe-object
    (standard-transformation t))
  (invert-transformation
    (identity-transformation))
  (make-load-form
    (translation-transformation))
  #+Genera (clos-internals:operation-handled-p
             (translation-transformation t)
             (identity-transformation t)
             (standard-transformation t))
  (print-object
    (identity-transformation t)
    (translation-transformation t)
    (standard-transformation t))
  #+Genera (clos-internals::print-self
             (identity-transformation t t t)
             (translation-transformation t t t)
             (standard-transformation t t t))
  (rectilinear-transformation-p
    (standard-transformation)
    (identity-transformation)
    (translation-transformation))
  #+Genera (clos-internals::send-if-handles
             (identity-transformation t)
             (translation-transformation t)
             (standard-transformation t))
  (slot-unbound
    (t translation-transformation (eql 'clim-utils::inverse))
    (t standard-transformation (eql 'clim-utils::inverse)))
  (transform-distance
    (identity-transformation t t)
    (translation-transformation t t)
    (standard-transformation t t))
  (transform-position
    (identity-transformation t t)
    (translation-transformation t t)
    (standard-transformation t t))
  (transform-rectangle*
    (identity-transformation t t t t)
    (translation-transformation t t t t)
    (standard-transformation t t t t))
  (transform-region
    (identity-transformation standard-rectangle)
    (identity-transformation standard-bounding-rectangle)
    (translation-transformation standard-rectangle)
    (translation-transformation standard-bounding-rectangle)
    (standard-transformation standard-bounding-rectangle))
  (untransform-distance
    (translation-transformation t t))
  (untransform-position
    (identity-transformation t t)
    (translation-transformation t t)
    (standard-transformation t t))
  (untransform-region
    (identity-transformation t)
    (translation-transformation t)
    (standard-transformation t))
  #+Genera (clos-internals::which-operations
             (identity-transformation)
             (translation-transformation)
             (standard-transformation)))


;;; (generate-prefill-dispatch-caches 'bounding-rectangle)

(prefill-dispatch-caches
  (add-character-output-to-text-record
    (standard-text-output-record t t t t t)
    (styled-text-output-record t t t t t))
  (add-output-record
    (t standard-presentation)
    (t standard-cell-output-record)
    (t standard-item-list-output-record)
    (t standard-updating-output-record)
    (t standard-sequence-output-record)
    (t standard-tree-output-history)
    (t border-output-record)
    (t standard-row-output-record)
    (t standard-table-output-record)
    (t standard-column-output-record)
    (t standard-graph-node-output-record)
    (t tree-graph-output-record)
    (t directed-graph-output-record)
    (t accept-values-output-record))
  (add-string-output-to-text-record
    (standard-text-output-record t t t t t t t)
    (styled-text-output-record t t t t t t t))
  (adjust-table-cells
    (standard-item-list-output-record t)
    (standard-table-output-record t)
    (standard-row-output-record t)
    (standard-column-output-record t))
  (augment-draw-set
    (standard-updating-output-record t t t t t))
  (bounding-rectangle*
    (standard-bounding-rectangle)
    (standard-tree-output-history)
    (standard-sequence-output-record)
    (standard-updating-output-record)
    (standard-item-list-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-text-output-record)
    (border-output-record)
    (gadget-output-record)
    (rectangle-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (styled-text-output-record)
    (line-output-record)
    (polygon-output-record)
    (ellipse-output-record)
    (standard-column-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (standard-graph-node-output-record)
    (standard-point)
    (accept-values-output-record)
    (text-output-record))
  (bounding-rectangle-set-edges
    (standard-tree-output-history t t t t)
    (standard-sequence-output-record t t t t)
    (standard-updating-output-record t t t t)
    (standard-item-list-output-record t t t t)
    (standard-cell-output-record t t t t)
    (standard-presentation t t t t)
    (standard-text-output-record t t t t)
    (border-output-record t t t t)
    (gadget-output-record t t t t)
    (rectangle-output-record t t t t)
    (standard-bounding-rectangle t t t t)
    (standard-table-output-record t t t t)
    (standard-row-output-record t t t t)
    (styled-text-output-record t t t t)
    (line-output-record t t t t)
    (polygon-output-record t t t t)
    (ellipse-output-record t t t t)
    (standard-column-output-record t t t t)
    (tree-graph-output-record t t t t)
    (directed-graph-output-record t t t t)
    (standard-graph-node-output-record t t t t)
    (accept-values-output-record t t t t)
    (text-output-record t t t t))
  (bounding-rectangle-set-position
    (standard-tree-output-history t t)
    (standard-cell-output-record t t)
    (standard-presentation t t)
    (standard-bounding-rectangle t t)
    (standard-sequence-output-record t t)
    (standard-graph-node-output-record t t))
  (bounding-rectangle-set-size
    (standard-text-output-record t t)
    (standard-bounding-rectangle t t)
    (styled-text-output-record t t))
  (cache-output-record
    (standard-updating-output-record t t t))
  (cell-min-height
    (standard-cell-output-record))
  (cell-min-width
    (standard-cell-output-record))
  (cell-output-record-p
    (standard-cell-output-record))
  (children-never-overlap-p
    (standard-updating-output-record)
    (standard-presentation)
    (standard-sequence-output-record)
    (standard-cell-output-record))
  (clear-output-record
    (standard-tree-output-history)
    (standard-updating-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-item-list-output-record)
    (standard-sequence-output-record))
  (compute-difference-set
    (standard-updating-output-record)
    (rectangle-output-record)
    (ellipse-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-text-output-record)
    (standard-item-list-output-record)
    (styled-text-output-record)
    (standard-sequence-output-record)
    (polygon-output-record)
    (line-output-record))
  (compute-new-output-records
    (standard-updating-output-record t))
  (copy-display-state
    (standard-updating-output-record t)
    (accept-values-output-record t)
    (standard-table-output-record t)
    (standard-row-output-record t)
    (standard-cell-output-record t)
    (standard-presentation t)
    (standard-item-list-output-record t)
    (standard-sequence-output-record t))
  (decache-child-output-record
    (standard-updating-output-record t t)
    (standard-cell-output-record t t)
    (accept-values-output-record t t)
    (standard-item-list-output-record t t)
    (standard-row-output-record t t)
    (standard-table-output-record t t))
  (delete-output-record
    (t standard-tree-output-history)
    (t standard-cell-output-record)
    (t accept-values-output-record))
  (describe-object
    (gadget-output-record t))
  (displayed-output-record-p
    (standard-presentation)
    (border-output-record)
    (standard-sequence-output-record)
    (rectangle-output-record)
    (gadget-output-record)
    (standard-text-output-record)
    (styled-text-output-record)
    (standard-updating-output-record)
    (ellipse-output-record)
    (line-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-item-list-output-record)
    (polygon-output-record)
    (text-output-record))
  (find-cached-output-record
    (standard-updating-output-record t t))
  (find-child-output-record
    (standard-updating-output-record t t)
    (accept-values-output-record t t)
    (standard-table-output-record t t)
    (standard-row-output-record t t)
    (standard-presentation t t)
    (standard-cell-output-record t t))
  (generate-graph-nodes
    (tree-graph-output-record t t t t)
    (directed-graph-output-record t t t t))
  (graph-node-children
    (standard-graph-node-output-record))
  ((setf graph-node-children)
    (t standard-graph-node-output-record))
  ((setf graph-node-parents)
    (t standard-graph-node-output-record))
  ((setf graph-node-x)
    (t standard-graph-node-output-record))
  ((setf graph-node-y)
    (t standard-graph-node-output-record))
  (highlight-output-record
    (standard-presentation t t)
    (rectangle-output-record t t)
    (standard-text-output-record t t)
    (styled-text-output-record t t)
    (ellipse-output-record t t)
    (line-output-record t t)
    (text-output-record t t)
    (polygon-output-record t t))
  (layout-graph-edges
    (tree-graph-output-record t t t)
    (directed-graph-output-record t t t))
  (layout-graph-nodes
    (tree-graph-output-record t)
    (directed-graph-output-record t))
  (map-over-item-list-cells
    (standard-item-list-output-record t))
  (map-over-output-records-containing-position
    (t standard-tree-output-history t t)
    (t standard-item-list-output-record t t)
    (t standard-cell-output-record t t)
    (t standard-presentation t t)
    (t standard-text-output-record t t)
    (t border-output-record t t)
    (t standard-sequence-output-record t t)
    (t rectangle-output-record t t)
    (t standard-table-output-record t t)
    (t standard-row-output-record t t)
    (t styled-text-output-record t t)
    (t line-output-record t t)
    (t polygon-output-record t t)
    (t tree-graph-output-record t t)
    (t directed-graph-output-record t t)
    (t ellipse-output-record t t)
    (t standard-updating-output-record t t)
    (t accept-values-output-record t t)
    (t text-output-record t t))
  (map-over-output-records-overlapping-region
    (t standard-tree-output-history t)
    (t standard-item-list-output-record t)
    (t standard-cell-output-record t)
    (t standard-presentation t)
    (t standard-updating-output-record t)
    (t gadget-output-record t)
    (t standard-sequence-output-record t)
    (t border-output-record t)
    (t rectangle-output-record t)
    (t standard-text-output-record t)
    (t standard-table-output-record t)
    (t standard-row-output-record t)
    (t styled-text-output-record t)
    (t standard-column-output-record t)
    (t tree-graph-output-record t)
    (t directed-graph-output-record t)
    (t standard-graph-node-output-record t)
    (t ellipse-output-record t)
    (t line-output-record t)
    (t accept-values-output-record t)
    (t text-output-record t)
    (t polygon-output-record t))
  (map-over-row-cells
    (t standard-row-output-record)
    (t standard-column-output-record))
  (map-over-table-columns
    (t standard-table-output-record))
  (map-over-table-elements
    (t standard-item-list-output-record t)
    (t standard-table-output-record t)
    (t standard-row-output-record t)
    (t standard-column-output-record t)
    (t standard-updating-output-record t)
    (t standard-presentation t))
  (map-over-table-elements-helper
    (t standard-cell-output-record t)
    (t standard-row-output-record t)
    (t standard-column-output-record t)
    (t standard-updating-output-record t)
    (t standard-presentation t))
  (map-over-table-rows
    (t standard-table-output-record))
  (map-over-table-rows-or-columns
    (t standard-table-output-record))
  (match-output-records
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-item-list-output-record)
    (standard-sequence-output-record))
  (note-output-record-attached
    (standard-item-list-output-record t)
    (standard-cell-output-record t)
    (standard-presentation t)
    (standard-text-output-record t)
    (border-output-record t)
    (standard-sequence-output-record t)
    (gadget-output-record t)
    (rectangle-output-record t)
    (standard-table-output-record t)
    (standard-row-output-record t)
    (styled-text-output-record t)
    (line-output-record t)
    (polygon-output-record t)
    (ellipse-output-record t)
    (standard-column-output-record t)
    (tree-graph-output-record t)
    (directed-graph-output-record t)
    (standard-graph-node-output-record t)
    (standard-updating-output-record t)
    (accept-values-output-record t)
    (text-output-record t))
  (note-output-record-child-changed
    (standard-tree-output-history t t t t t))
  (note-output-record-detached
    (standard-text-output-record)
    (standard-presentation)
    (border-output-record)
    (standard-sequence-output-record)
    (gadget-output-record)
    (rectangle-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-item-list-output-record)
    (styled-text-output-record)
    (line-output-record)
    (polygon-output-record)
    (ellipse-output-record)
    (standard-column-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (standard-graph-node-output-record)
    (standard-updating-output-record)
    (accept-values-output-record)
    (text-output-record))
  (note-output-record-moved
    (standard-cell-output-record t t t t)
    (standard-presentation t t t t)
    (standard-text-output-record t t t t)
    (border-output-record t t t t)
    (standard-sequence-output-record t t t t)
    (gadget-output-record t t t t)
    (rectangle-output-record t t t t)
    (styled-text-output-record t t t t)
    (standard-item-list-output-record t t t t)
    (polygon-output-record t t t t)
    (ellipse-output-record t t t t)
    (line-output-record t t t t)
    (standard-table-output-record t t t t)
    (standard-row-output-record t t t t)
    (standard-graph-node-output-record t t t t)
    (standard-updating-output-record t t t t))
  (note-output-record-replayed
    (standard-tree-output-history t)
    (standard-presentation t)
    (gadget-output-record t)
    (standard-sequence-output-record t)
    (border-output-record t)
    (standard-cell-output-record t)
    (standard-item-list-output-record t)
    (standard-row-output-record t)
    (standard-table-output-record t)
    (standard-column-output-record t)
    (standard-graph-node-output-record t)
    (tree-graph-output-record t)
    (directed-graph-output-record t)
    (standard-updating-output-record t)
    (accept-values-output-record t))
  #+Genera (clos-internals:operation-handled-p
             (standard-bounding-rectangle t)
             (gadget-output-record t)
             (standard-tree-output-history t))
  (output-record-cache-value
    (standard-updating-output-record))
  (output-record-children
    (standard-updating-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-item-list-output-record)
    (standard-sequence-output-record))
  (output-record-contents-ok
    (standard-updating-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-item-list-output-record)
    (standard-text-output-record)
    (styled-text-output-record))
  (output-record-count
    (standard-presentation)
    (standard-cell-output-record)
    (standard-item-list-output-record)
    (standard-updating-output-record)
    (standard-sequence-output-record)
    (standard-tree-output-history)
    (border-output-record)
    (standard-row-output-record)
    (standard-table-output-record)
    (standard-column-output-record)
    (standard-graph-node-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (accept-values-output-record))
  (output-record-end-cursor-position
    (standard-updating-output-record))
  (output-record-gadget
    (gadget-output-record))
  ((setf output-record-gadget)
    (t gadget-output-record))
  (output-record-generation-tick
    (standard-updating-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-item-list-output-record))
  ((setf output-record-generation-tick)
    (t standard-updating-output-record)
    (t accept-values-output-record)
    (t standard-table-output-record)
    (t standard-row-output-record)
    (t standard-cell-output-record)
    (t standard-presentation)
    (t standard-item-list-output-record)
    (t standard-sequence-output-record))
  (output-record-old-cursor-position
    (standard-updating-output-record))
  ((setf output-record-old-parent)
    (t standard-updating-output-record))
  (output-record-old-start-cursor-position
    (standard-updating-output-record)
    (accept-values-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-item-list-output-record)
    (standard-sequence-output-record)
    (standard-text-output-record)
    (styled-text-output-record))
  (output-record-p
    (standard-tree-output-history)
    (standard-item-list-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-text-output-record)
    (border-output-record)
    (standard-sequence-output-record)
    (gadget-output-record)
    (rectangle-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (styled-text-output-record)
    (line-output-record)
    (polygon-output-record)
    (ellipse-output-record)
    (standard-column-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (standard-graph-node-output-record)
    (standard-updating-output-record)
    (accept-values-output-record)
    (text-output-record))
  (output-record-parent
    (standard-presentation)
    (standard-cell-output-record)
    (standard-item-list-output-record)
    (standard-updating-output-record)
    (standard-sequence-output-record)
    (standard-tree-output-history)
    (gadget-output-record)
    (border-output-record)
    (standard-row-output-record)
    (standard-table-output-record)
    (standard-text-output-record)
    (line-output-record)
    (rectangle-output-record)
    (ellipse-output-record)
    (standard-column-output-record)
    (standard-graph-node-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (accept-values-output-record)
    (polygon-output-record)
    (styled-text-output-record))
  ((setf output-record-parent)
    (t standard-text-output-record)
    (t standard-presentation)
    (t standard-cell-output-record)
    (t standard-item-list-output-record)
    (t standard-updating-output-record)
    (t gadget-output-record)
    (t standard-sequence-output-record)
    (t border-output-record)
    (t rectangle-output-record)
    (t standard-row-output-record)
    (t standard-table-output-record)
    (t styled-text-output-record)
    (t line-output-record)
    (t polygon-output-record)
    (t ellipse-output-record)
    (t standard-column-output-record)
    (t standard-graph-node-output-record)
    (t tree-graph-output-record)
    (t directed-graph-output-record)
    (t accept-values-output-record)
    (t text-output-record))
  (output-record-refined-position-test
    (standard-presentation t t)
    (rectangle-output-record t t)
    (standard-text-output-record t t)
    (styled-text-output-record t t)
    (line-output-record t t)
    (ellipse-output-record t t)
    (text-output-record t t)
    (polygon-output-record t t))
  (output-record-set-end-cursor-position
    (standard-presentation t t)
    (standard-cell-output-record t t)
    (standard-item-list-output-record t t)
    (standard-updating-output-record t t)
    (standard-sequence-output-record t t)
    (gadget-output-record t t)
    (border-output-record t t)
    (standard-row-output-record t t)
    (standard-table-output-record t t)
    (standard-column-output-record t t)
    (standard-graph-node-output-record t t)
    (tree-graph-output-record t t)
    (directed-graph-output-record t t)
    (standard-tree-output-history t t)
    (accept-values-output-record t t))
  (output-record-set-old-start-cursor-position
    (standard-updating-output-record t t)
    (accept-values-output-record t t)
    (standard-table-output-record t t)
    (standard-row-output-record t t)
    (standard-cell-output-record t t)
    (standard-presentation t t)
    (standard-item-list-output-record t t)
    (standard-sequence-output-record t t)
    (standard-text-output-record t t)
    (styled-text-output-record t t))
  (output-record-set-position
    (standard-tree-output-history t t)
    (standard-cell-output-record t t)
    (standard-presentation t t)
    (standard-sequence-output-record t t)
    (standard-graph-node-output-record t t))
  (output-record-set-start-cursor-position
    (standard-sequence-output-record t t)
    (standard-updating-output-record t t)
    (standard-item-list-output-record t t)
    (standard-cell-output-record t t)
    (standard-presentation t t)
    (standard-text-output-record t t)
    (border-output-record t t)
    (gadget-output-record t t)
    (standard-table-output-record t t)
    (standard-row-output-record t t)
    (styled-text-output-record t t)
    (standard-column-output-record t t)
    (tree-graph-output-record t t)
    (directed-graph-output-record t t)
    (standard-graph-node-output-record t t)
    (accept-values-output-record t t))
  (output-record-start-cursor-position
    (standard-tree-output-history)
    (standard-sequence-output-record)
    (standard-updating-output-record)
    (standard-item-list-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-text-output-record)
    (border-output-record)
    (gadget-output-record)
    (rectangle-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (styled-text-output-record)
    (line-output-record)
    (polygon-output-record)
    (ellipse-output-record)
    (standard-column-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (standard-graph-node-output-record)
    (accept-values-output-record)
    (text-output-record))
  (output-record-stream
    (gadget-output-record)
    (standard-updating-output-record)
    (standard-sequence-output-record))
  ((setf output-record-stream)
    (t standard-item-list-output-record)
    (t standard-cell-output-record)
    (t standard-presentation)
    (t standard-text-output-record)
    (t border-output-record)
    (t standard-sequence-output-record)
    (t gadget-output-record)
    (t rectangle-output-record)
    (t standard-table-output-record)
    (t standard-row-output-record)
    (t styled-text-output-record)
    (t line-output-record)
    (t polygon-output-record)
    (t ellipse-output-record)
    (t standard-column-output-record)
    (t tree-graph-output-record)
    (t directed-graph-output-record)
    (t standard-graph-node-output-record)
    (t standard-updating-output-record)
    (t accept-values-output-record)
    (t text-output-record))
  (output-record-unique-id
    (standard-updating-output-record)
    (standard-text-output-record)
    (styled-text-output-record))
  (point-position
    (standard-point))
  (point-x
    (standard-point))
  ((setf point-x)
    (t standard-point))
  (point-y
    (standard-point))
  ((setf point-y)
    (t standard-point))
  (prepare-text-record-for-appending
    (standard-text-output-record t t)
    (styled-text-output-record t t))
  (presentation-object
    (standard-presentation))
  ((setf presentation-object)
    (t standard-presentation))
  (presentation-single-box
    (standard-presentation))
  (presentation-type
    (standard-presentation))
  (presentationp
    (standard-tree-output-history)
    (standard-item-list-output-record)
    (standard-cell-output-record)
    (standard-presentation)
    (standard-text-output-record)
    (border-output-record)
    (standard-sequence-output-record)
    (rectangle-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (styled-text-output-record)
    (line-output-record)
    (polygon-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (ellipse-output-record)
    (standard-updating-output-record)
    (accept-values-output-record)
    (text-output-record))
  (print-object
    (standard-bounding-rectangle t)
    (gadget-output-record t)
    (standard-tree-output-history t))
  #+Genera (clos-internals::print-self
             (standard-bounding-rectangle t t t)
             (gadget-output-record t t t)
             (standard-tree-output-history t t t))
  (propagate-output-record-changes-p
    (standard-tree-output-history t t))
  (recompute-contents-ok
    (standard-cell-output-record)
    (standard-row-output-record)
    (standard-text-output-record)
    (standard-presentation)
    (standard-table-output-record)
    (accept-values-output-record)
    (styled-text-output-record)
    (standard-item-list-output-record)
    (standard-sequence-output-record))
  (recompute-extent
    (standard-updating-output-record)
    (standard-tree-output-history)
    (standard-sequence-output-record)
    (standard-presentation)
    (standard-cell-output-record)
    (accept-values-output-record))
  (recompute-extent-for-changed-child
    (standard-updating-output-record t t t t t)
    (standard-tree-output-history t t t t t)
    (standard-sequence-output-record t t t t t)
    (standard-presentation t t t t t)
    (standard-cell-output-record t t t t t)
    (accept-values-output-record t t t t t))
  (recompute-extent-for-new-child
    (standard-presentation t)
    (standard-cell-output-record t)
    (standard-item-list-output-record t)
    (standard-updating-output-record t)
    (standard-sequence-output-record t)
    (standard-tree-output-history t)
    (border-output-record t)
    (standard-row-output-record t)
    (standard-table-output-record t)
    (standard-column-output-record t)
    (standard-graph-node-output-record t)
    (tree-graph-output-record t)
    (directed-graph-output-record t)
    (accept-values-output-record t))
  (recompute-output-record
    (standard-updating-output-record t t t t t t t t))
  (redisplay-output-record
    (standard-updating-output-record t))
  (region-contains-position-p
    (standard-bounding-rectangle t t))
  (region-intersection
    (standard-bounding-rectangle nowhere)
    (standard-bounding-rectangle standard-rectangle)
    (standard-bounding-rectangle standard-bounding-rectangle)
    (everywhere standard-rectangle))
  (region-intersects-region-p
    (standard-item-list-output-record standard-item-list-output-record)
    (standard-bounding-rectangle standard-rectangle)
    (standard-bounding-rectangle standard-bounding-rectangle)
    (standard-presentation standard-text-output-record)
    (standard-presentation standard-table-output-record)
    (standard-presentation standard-presentation)
    (standard-text-output-record line-output-record)
    (standard-text-output-record ellipse-output-record)
    (standard-text-output-record polygon-output-record)
    (standard-text-output-record styled-text-output-record)
    (standard-text-output-record standard-presentation)
    (line-output-record rectangle-output-record)
    (line-output-record line-output-record)
    (rectangle-output-record ellipse-output-record)
    (rectangle-output-record rectangle-output-record)
    (rectangle-output-record styled-text-output-record)
    (rectangle-output-record line-output-record)
    (ellipse-output-record rectangle-output-record)
    (ellipse-output-record line-output-record)
    (ellipse-output-record ellipse-output-record)
    (standard-sequence-output-record standard-updating-output-record)
    (styled-text-output-record line-output-record)
    (styled-text-output-record ellipse-output-record)
    (styled-text-output-record polygon-output-record)
    (styled-text-output-record styled-text-output-record)
    (styled-text-output-record rectangle-output-record)
    (styled-text-output-record standard-presentation)
    (polygon-output-record line-output-record)
    (polygon-output-record rectangle-output-record))
  (repaint-sheet
    (top-level-sheet standard-bounding-rectangle)
    (interactor-pane standard-bounding-rectangle)
    (command-menu-pane standard-bounding-rectangle)
    (application-pane standard-bounding-rectangle)
    (clim-stream-pane standard-bounding-rectangle))
  (replay-output-record
    (standard-tree-output-history t)
    (standard-item-list-output-record t)
    (standard-text-output-record t)
    (border-output-record t)
    (rectangle-output-record t)
    (standard-presentation t)
    (standard-table-output-record t)
    (styled-text-output-record t)
    (line-output-record t)
    (polygon-output-record t)
    (ellipse-output-record t)
    (tree-graph-output-record t)
    (directed-graph-output-record t)
    (standard-updating-output-record t)
    (standard-sequence-output-record t)
    (text-output-record t))
  (reposition-output-record
    (standard-updating-output-record t t t t t))
  (row-output-record-p
    (standard-row-output-record)
    (standard-column-output-record))
  (row-table-p
    (standard-table-output-record))
  #+Genera (clos-internals::send-if-handles
             (gadget-output-record t))
  (stylize-text-output-record
    (standard-text-output-record t t))
  (transform-region)
  (tree-recompute-extent
    (standard-item-list-output-record)
    (gadget-output-record)
    (standard-presentation)
    (standard-table-output-record)
    (standard-sequence-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record))
  (tree-recompute-extent-1
    (standard-item-list-output-record)
    (standard-cell-output-record)
    (gadget-output-record)
    (standard-presentation)
    (border-output-record)
    (standard-sequence-output-record)
    (rectangle-output-record)
    (standard-table-output-record)
    (standard-row-output-record)
    (polygon-output-record)
    (ellipse-output-record)
    (line-output-record)
    (standard-column-output-record)
    (tree-graph-output-record)
    (directed-graph-output-record)
    (standard-graph-node-output-record)
    (standard-updating-output-record))
  (update-gadget-position
    (gadget-output-record))
  #+Genera (clos-internals::which-operations
             (standard-bounding-rectangle)
             (gadget-output-record)
             (standard-tree-output-history)))


;;; (generate-prefill-dispatch-caches 'design)

(prefill-dispatch-caches
  (add-character-output-to-text-record)
  (add-output-record)
  (add-string-output-to-text-record)
  (adjust-table-cells)
  (augment-draw-set)
  (bounding-rectangle*
    (standard-text-cursor))
  (bounding-rectangle-set-edges)
  (bounding-rectangle-set-position)
  (bounding-rectangle-set-size)
  (cache-output-record)
  (cell-min-height)
  (cell-min-width)
  (cell-output-record-p)
  (children-never-overlap-p)
  (clear-output-record)
  (color-rgb
    (rgb-color))
  (compute-difference-set)
  (compute-new-output-records)
  (copy-display-state)
  (cursor-active
    (standard-text-cursor))
  ((setf cursor-active)
    (t standard-text-cursor))
  (cursor-focus
    (standard-text-cursor))
  ((setf cursor-focus)
    (t standard-text-cursor))
  (cursor-position
    (standard-text-cursor))
  (cursor-set-position
    (standard-text-cursor t t))
  (cursor-state
    (standard-text-cursor))
  ((setf cursor-state)
    (t standard-text-cursor))
  ((setf cursor-stream)
    (t standard-text-cursor))
  (cursor-visibility
    (standard-text-cursor))
  ((setf cursor-visibility)
    (t standard-text-cursor))
  (cursor-width-and-height-pending-protocol
    (standard-text-cursor))
  (decache-child-output-record)
  (decode-pattern
    (pattern))
  (decode-rectangular-tile
    (rectangular-tile))
  (delete-output-record)
  (describe-object)
  (displayed-output-record-p)
  (find-cached-output-record)
  (find-child-output-record)
  (generate-graph-nodes)
  (graph-node-children)
  ((setf graph-node-children))
  ((setf graph-node-parents))
  ((setf graph-node-x))
  ((setf graph-node-y))
  (highlight-output-record)
  (layout-graph-edges)
  (layout-graph-nodes)
  (make-load-form
    (gray-color))
  (map-over-item-list-cells)
  (map-over-output-records-containing-position)
  (map-over-output-records-overlapping-region)
  (map-over-row-cells)
  (map-over-table-columns)
  (map-over-table-elements)
  (map-over-table-elements-helper)
  (map-over-table-rows)
  (map-over-table-rows-or-columns)
  (match-output-records)
  (note-cursor-change
    (standard-text-cursor t t t))
  (note-output-record-attached)
  (note-output-record-child-changed)
  (note-output-record-detached)
  (note-output-record-moved)
  (note-output-record-replayed)
  #+Genera (clos-internals:operation-handled-p
             (rgb-color t)
             (gray-color t)
             (standard-opacity t))
  (output-record-cache-value)
  (output-record-children)
  (output-record-contents-ok)
  (output-record-count)
  (output-record-end-cursor-position)
  (output-record-gadget)
  ((setf output-record-gadget))
  (output-record-generation-tick)
  ((setf output-record-generation-tick))
  (output-record-old-cursor-position)
  ((setf output-record-old-parent))
  (output-record-old-start-cursor-position)
  (output-record-p)
  (output-record-parent)
  ((setf output-record-parent))
  (output-record-refined-position-test)
  (output-record-set-end-cursor-position)
  (output-record-set-old-start-cursor-position)
  (output-record-set-position)
  (output-record-set-start-cursor-position)
  (output-record-start-cursor-position)
  (output-record-stream)
  ((setf output-record-stream))
  (output-record-unique-id)
  (point-position)
  (point-x)
  ((setf point-x))
  (point-y)
  ((setf point-y))
  (port-draw-cursor)
  (prepare-text-record-for-appending)
  (presentation-object)
  ((setf presentation-object))
  (presentation-single-box)
  (presentation-type)
  (presentationp)
  (print-object
    (rgb-color t)
    (gray-color t))
  #+Genera (clos-internals::print-self
             (rgb-color t t t)
             (gray-color t t t))
  (propagate-output-record-changes-p)
  (recompute-contents-ok)
  (recompute-extent)
  (recompute-extent-for-changed-child)
  (recompute-extent-for-new-child)
  (recompute-output-record)
  (redisplay-output-record)
  (region-contains-position-p)
  (region-intersection)
  (region-intersects-region-p)
  (repaint-sheet)
  (replay-output-record)
  (reposition-output-record)
  (row-output-record-p)
  (row-table-p)
  #+Genera (clos-internals::send-if-handles)
  (stylize-text-output-record)
  (transform-region)
  (tree-recompute-extent)
  (tree-recompute-extent-1)
  (update-gadget-position)
  #+Genera (clos-internals::which-operations
             (rgb-color)
             (gray-color)))


;;; (generate-prefill-dispatch-caches 'line-style)

(prefill-dispatch-caches
  (line-style-cap-shape
    (standard-line-style))
  (line-style-dashes
    (standard-line-style))
  (line-style-joint-shape
    (standard-line-style))
  (line-style-thickness
    (standard-line-style))
  (line-style-unit
    (standard-line-style))
  (make-load-form
    (standard-line-style))
  #+Genera (clos-internals:operation-handled-p
             (standard-line-style t)))


;;; (generate-prefill-dispatch-caches 'text-style)

(prefill-dispatch-caches
  (merge-text-styles
    (standard-text-style standard-text-style)
    (cons standard-text-style))
  #+Genera (clos-internals:operation-handled-p
             (standard-text-style t))
  (parse-text-style
    (standard-text-style))
  (print-object
    (standard-text-style t))
  #+Genera (clos-internals::print-self
             (standard-text-style t t t))
  #+Genera (clos-internals::send-if-handles
             (standard-text-style t))
  (text-style-ascent)
  (text-style-descent)
  (text-style-face
    (standard-text-style))
  (text-style-family
    (standard-text-style))
  (text-style-height)
  (text-style-index
    (standard-text-style))
  (text-style-mapping)
  (text-style-size
    (standard-text-style))
  (text-style-width)
  #+Genera (clos-internals::which-operations
             (standard-text-style)))


;;; (generate-prefill-dispatch-caches 'sheet)

(prefill-dispatch-caches
  (activate-callback
    (push-button-pane t t))
  (allocate-space
    (top-level-sheet t t)
    (vbox-pane t t)
    (outlined-pane t t)
    (command-menu-pane t t)
    (hbox-pane t t)
    (push-button-pane t t)
    (toggle-button-pane t t)
    (radio-box-pane t t)
    (spacing-pane t t)
    (slider-pane t t)
    (scroller-pane t t)
    (table-pane t t)
    (viewport t t)
    (interactor-pane t t)
    (scroll-bar-pane t t)
    (scroll-bar-target-pane t t)
    (scroll-bar-shaft-pane t t)
    (application-pane t t)
    (clim-stream-pane t t))
  (application-frame-p
    (outlined-pane))
  (armed-callback
    (slider-pane t t)
    (toggle-button-pane t t)
    (push-button-pane t t))
  (bounding-rectangle*
    (viewport)
    (vbox-pane)
    (top-level-sheet)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane)
    (standard-graft))
  (change-scroll-bar-values
    (scroll-bar-pane))
  (change-space-requirements
    (clim-stream-pane))
  (child-containing-position
    (top-level-sheet t t)
    (vbox-pane t t)
    (outlined-pane t t)
    (scroller-pane t t)
    (table-pane t t)
    (viewport t t)
    (interactor-pane t t)
    (command-menu-pane t t)
    (spacing-pane t t)
    (hbox-pane t t)
    (radio-box-pane t t)
    (scroll-bar-pane t t)
    (application-pane t t)
    (clim-stream-pane t t))
  (children-overlapping-region
    (top-level-sheet t)
    (vbox-pane t)
    (outlined-pane t)
    (scroller-pane t)
    (table-pane t)
    (scroll-bar-pane t)
    (spacing-pane t)
    (hbox-pane t)
    (viewport t)
    (interactor-pane t)
    (radio-box-pane t)
    (command-menu-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (clear-output-history
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (clear-space-requirement-cache
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (compose-space
    (vbox-pane)
    (outlined-pane)
    (command-menu-pane)
    (hbox-pane)
    (push-button-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (spacing-pane)
    (slider-pane)
    (scroller-pane)
    (table-pane)
    (viewport)
    (interactor-pane)
    (scroll-bar-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (application-pane)
    (clim-stream-pane))
  (compute-gadget-label-size
    (push-button-pane)
    (toggle-button-pane)
    (slider-pane))
  (decode-stream-for-writing
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (default-space-requirements
    (push-button-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (slider-pane)
    (interactor-pane)
    (scroll-bar-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (describe-object
    (vbox-pane t)
    (push-button-pane t)
    (toggle-button-pane t)
    (hbox-pane t))
  (disarmed-callback
    (slider-pane t t)
    (toggle-button-pane t t)
    (push-button-pane t t))
  (dispatch-event
    (top-level-sheet pointer-enter-event)
    (top-level-sheet pointer-exit-event)
    (top-level-sheet key-press-event)
    (top-level-sheet key-release-event)
    (top-level-sheet window-configuration-event)
    (vbox-pane pointer-exit-event)
    (vbox-pane pointer-motion-event)
    (vbox-pane pointer-button-release-event)
    (vbox-pane pointer-enter-event)
    (outlined-pane pointer-exit-event)
    (outlined-pane pointer-motion-event)
    (outlined-pane pointer-button-release-event)
    (outlined-pane pointer-enter-event)
    (scroller-pane pointer-exit-event)
    (scroller-pane pointer-enter-event)
    (table-pane pointer-exit-event)
    (table-pane pointer-motion-event)
    (table-pane pointer-button-press-event)
    (table-pane pointer-button-release-event)
    (table-pane pointer-enter-event)
    (viewport pointer-exit-event)
    (viewport pointer-motion-event)
    (viewport pointer-button-press-event)
    (viewport pointer-button-release-event)
    (viewport pointer-enter-event)
    (interactor-pane pointer-motion-event)
    (interactor-pane pointer-button-release-event)
    (interactor-pane pointer-exit-event)
    (interactor-pane pointer-button-press-event)
    (interactor-pane key-press-event)
    (interactor-pane key-release-event)
    (interactor-pane pointer-enter-event)
    (command-menu-pane pointer-motion-event)
    (command-menu-pane pointer-exit-event)
    (command-menu-pane pointer-button-press-event)
    (command-menu-pane pointer-button-release-event)
    (command-menu-pane pointer-enter-event)
    (spacing-pane pointer-exit-event)
    (spacing-pane pointer-motion-event)
    (spacing-pane pointer-button-release-event)
    (spacing-pane pointer-enter-event)
    (slider-pane pointer-motion-event)
    (slider-pane pointer-exit-event)
    (slider-pane pointer-button-press-event)
    (slider-pane pointer-button-release-event)
    (slider-pane pointer-enter-event)
    (hbox-pane pointer-exit-event)
    (hbox-pane pointer-motion-event)
    (hbox-pane pointer-enter-event)
    (toggle-button-pane pointer-motion-event)
    (toggle-button-pane pointer-exit-event)
    (toggle-button-pane pointer-button-press-event)
    (toggle-button-pane pointer-button-release-event)
    (toggle-button-pane pointer-enter-event)
    (push-button-pane pointer-motion-event)
    (push-button-pane pointer-exit-event)
    (push-button-pane pointer-button-press-event)
    (push-button-pane pointer-button-release-event)
    (push-button-pane pointer-enter-event)
    (radio-box-pane pointer-exit-event)
    (radio-box-pane pointer-enter-event)
    (scroll-bar-pane pointer-exit-event)
    (scroll-bar-pane pointer-enter-event)
    (scroll-bar-shaft-pane pointer-motion-event)
    (scroll-bar-shaft-pane pointer-exit-event)
    (scroll-bar-shaft-pane pointer-button-press-event)
    (scroll-bar-shaft-pane pointer-button-release-event)
    (scroll-bar-shaft-pane pointer-enter-event)
    (scroll-bar-target-pane pointer-motion-event)
    (scroll-bar-target-pane pointer-button-press-event)
    (scroll-bar-target-pane pointer-button-release-event)
    (scroll-bar-target-pane pointer-exit-event)
    (scroll-bar-target-pane pointer-enter-event)
    (application-pane pointer-motion-event)
    (application-pane pointer-button-release-event)
    (application-pane pointer-exit-event)
    (application-pane key-press-event)
    (application-pane key-release-event)
    (application-pane pointer-button-press-event)
    (application-pane pointer-enter-event)
    (clim-stream-pane pointer-motion-event)
    (clim-stream-pane pointer-exit-event)
    (clim-stream-pane pointer-button-press-event)
    (clim-stream-pane pointer-button-release-event)
    (clim-stream-pane pointer-enter-event))
  (do-text-screen-real-estate
    (interactor-pane t t t t t t t t t t)
    (application-pane t t t t t t t t t t))
  (drag-callback
    (slider-pane t t t))
  (silica::draw-slider-indicator
    (slider-pane t t))
  (silica::draw-target
    (scroll-bar-target-pane t))
  (silica::draw-thumb
    (scroll-bar-shaft-pane t))
  (encode-stream-after-writing
    (command-menu-pane t t t t)
    (interactor-pane t t t t)
    (clim-stream-pane t t t t)
    (application-pane t t t t))
  (engraft-medium)
  (extended-output-stream-p
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (gadget-client
    (scroll-bar-pane))
  ((setf gadget-client)
    (t toggle-button-pane))
  (gadget-id
    (scroll-bar-pane))
  (gadget-label
    (slider-pane)
    (push-button-pane))
  (gadget-max-value
    (scroll-bar-pane))
  (gadget-min-value
    (scroll-bar-pane))
  (gadget-orientation
    (scroll-bar-pane))
  (gadget-value
    (scroll-bar-pane)
    (slider-pane)
    (toggle-button-pane))
  ((setf gadget-value)
    (t toggle-button-pane)
    (t slider-pane)
    (t radio-box-pane)
    (t scroll-bar-pane))
  (get-text-output-record
    (command-menu-pane t)
    (interactor-pane t)
    (clim-stream-pane t)
    (application-pane t))
  (graft
    (standard-graft)
    (clim-stream-pane))
  (handle-event
    (top-level-sheet window-configuration-event)
    (viewport pointer-exit-event)
    (viewport pointer-motion-event)
    (viewport pointer-button-press-event)
    (viewport pointer-button-release-event)
    (viewport pointer-enter-event)
    (slider-pane pointer-motion-event)
    (slider-pane pointer-exit-event)
    (slider-pane pointer-button-press-event)
    (slider-pane pointer-button-release-event)
    (slider-pane pointer-enter-event)
    (toggle-button-pane pointer-motion-event)
    (toggle-button-pane pointer-exit-event)
    (toggle-button-pane pointer-button-press-event)
    (toggle-button-pane pointer-button-release-event)
    (toggle-button-pane pointer-enter-event)
    (push-button-pane pointer-motion-event)
    (push-button-pane pointer-exit-event)
    (push-button-pane pointer-button-press-event)
    (push-button-pane pointer-button-release-event)
    (push-button-pane pointer-enter-event)
    (scroll-bar-shaft-pane pointer-motion-event)
    (scroll-bar-shaft-pane pointer-exit-event)
    (scroll-bar-shaft-pane pointer-button-press-event)
    (scroll-bar-shaft-pane pointer-button-release-event)
    (scroll-bar-shaft-pane pointer-enter-event)
    (scroll-bar-target-pane pointer-motion-event)
    (scroll-bar-target-pane pointer-button-press-event)
    (scroll-bar-target-pane pointer-button-release-event)
    (scroll-bar-target-pane pointer-exit-event)
    (scroll-bar-target-pane pointer-enter-event))
  (handle-repaint
    (top-level-sheet t)
    (vbox-pane t)
    (outlined-pane t)
    (scroller-pane t)
    (table-pane t)
    (scroll-bar-pane t)
    (spacing-pane t)
    (hbox-pane t)
    (scroll-bar-target-pane t)
    (scroll-bar-shaft-pane t)
    (viewport t)
    (interactor-pane t)
    (slider-pane t)
    (radio-box-pane t)
    (toggle-button-pane t)
    (push-button-pane t)
    (command-menu-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (silica::highlight-button
    (toggle-button-pane t)
    (push-button-pane t))
  (incremental-redisplay
    (application-pane t t t t t t))
  (initialize-instance
    (push-button-pane)
    (hbox-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (slider-pane)
    (interactor-pane)
    (scroll-bar-pane)
    (vbox-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (initialize-menu)
  (input-editing-stream-p
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (invalidate-cached-regions
    (standard-graft)
    (interactor-pane)
    (command-menu-pane)
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (application-pane)
    (clim-stream-pane))
  (invalidate-cached-transformations
    (interactor-pane)
    (command-menu-pane)
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (application-pane)
    (clim-stream-pane))
  (invoke-formatting-cell
    (command-menu-pane t)
    (interactor-pane t)
    (clim-stream-pane t)
    (application-pane t))
  (invoke-with-drawing-options
    (interactor-pane t)
    (command-menu-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (invoke-with-input-editor-typeout
    (interactor-pane t))
  (invoke-with-new-output-record
    (command-menu-pane t t t)
    (interactor-pane t t t)
    (clim-stream-pane t t t)
    (application-pane t t t))
  (invoke-with-output-recording-options
    (command-menu-pane t t t)
    (interactor-pane t t t)
    (application-pane t t t)
    (clim-stream-pane t t t))
  (invoke-with-sheet-medium
    (top-level-sheet t)
    (outlined-pane t)
    (spacing-pane t)
    (scroll-bar-target-pane t)
    (scroll-bar-shaft-pane t)
    (interactor-pane t)
    (slider-pane t)
    (toggle-button-pane t)
    (push-button-pane t)
    (command-menu-pane t)
    (scroll-bar-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (invoke-with-text-style
    (command-menu-pane t t t)
    (interactor-pane t t t)
    (clim-stream-pane t t t)
    (application-pane t t t))
  (map-sheet-position-to-child
    (vbox-pane t t)
    (outlined-pane t t)
    (scroller-pane t t)
    (table-pane t t)
    (viewport t t)
    (interactor-pane t t)
    (command-menu-pane t t)
    (spacing-pane t t)
    (slider-pane t t)
    (hbox-pane t t)
    (toggle-button-pane t t)
    (push-button-pane t t)
    (radio-box-pane t t)
    (scroll-bar-pane t t)
    (scroll-bar-shaft-pane t t)
    (scroll-bar-target-pane t t)
    (application-pane t t)
    (clim-stream-pane t t))
  (medium-+y-upward-p
    (application-pane))
  ((setf medium-+y-upward-p)
    (t application-pane))
  (medium-background
    (top-level-sheet)
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (medium-default-text-style
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (medium-draw-ellipse*
    (application-pane t t t t t t t t t))
  (medium-draw-line*
    (application-pane t t t t)
    (clim-stream-pane t t t t))
  (medium-draw-polygon*
    (application-pane t t t))
  (medium-draw-rectangle*
    (interactor-pane t t t t t)
    (command-menu-pane t t t t t)
    (application-pane t t t t t))
  (medium-draw-text*
    (clim-stream-pane t t t t t t t t t t))
  (medium-foreground
    (top-level-sheet)
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (medium-ink
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (medium-line-style
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (medium-merged-text-style
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (medium-text-style
    (clim-stream-pane))
  (medium-transformation
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf medium-transformation)
    (t interactor-pane)
    (t application-pane))
  (mirror-region-updated)
  (move-and-resize-sheet
    (outlined-pane t t t t)
    (command-menu-pane t t t t)
    (vbox-pane t t t t)
    (hbox-pane t t t t)
    (push-button-pane t t t t)
    (toggle-button-pane t t t t)
    (radio-box-pane t t t t)
    (spacing-pane t t t t)
    (slider-pane t t t t)
    (scroller-pane t t t t)
    (viewport t t t t)
    (scroll-bar-pane t t t t)
    (scroll-bar-target-pane t t t t)
    (scroll-bar-shaft-pane t t t t)
    (clim-stream-pane t t t t))
  (move-sheet
    (command-menu-pane t t)
    (outlined-pane t t)
    (push-button-pane t t)
    (hbox-pane t t)
    (toggle-button-pane t t)
    (radio-box-pane t t)
    (slider-pane t t)
    (spacing-pane t t)
    (viewport t t)
    (scroll-bar-target-pane t t)
    (scroll-bar-shaft-pane t t)
    (vbox-pane t t)
    (scroll-bar-pane t t)
    (scroller-pane t t)
    (clim-stream-pane t t))
  (note-layout-mixin-region-changed
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (command-menu-pane)
    (hbox-pane)
    (push-button-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (spacing-pane)
    (slider-pane)
    (scroller-pane)
    (table-pane)
    (viewport)
    (interactor-pane)
    (scroll-bar-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (application-pane)
    (clim-stream-pane))
  (note-sheet-adopted
    (push-button-pane)
    (hbox-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (slider-pane)
    (spacing-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (vbox-pane)
    (viewport)
    (scroll-bar-pane)
    (table-pane)
    (interactor-pane)
    (scroller-pane)
    (outlined-pane)
    (command-menu-pane)
    (top-level-sheet)
    (application-pane)
    (clim-stream-pane))
  (note-sheet-degrafted
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (vbox-pane)
    (viewport)
    (interactor-pane)
    (push-button-pane)
    (slider-pane))
  (note-sheet-disabled
    (top-level-sheet)
    (slider-pane)
    (push-button-pane)
    (scroller-pane)
    (scroll-bar-pane))
  (note-sheet-disowned
    (scroller-pane)
    (push-button-pane)
    (slider-pane))
  (note-sheet-enabled
    (push-button-pane)
    (hbox-pane)
    (outlined-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (slider-pane)
    (spacing-pane)
    (interactor-pane)
    (scroller-pane)
    (scroll-bar-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (vbox-pane)
    (viewport)
    (table-pane)
    (command-menu-pane)
    (top-level-sheet)
    (application-pane)
    (clim-stream-pane))
  (note-sheet-grafted
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (note-sheet-region-changed
    (standard-graft)
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (command-menu-pane)
    (hbox-pane)
    (push-button-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (spacing-pane)
    (slider-pane)
    (scroller-pane)
    (table-pane)
    (viewport)
    (interactor-pane)
    (scroll-bar-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (application-pane)
    (clim-stream-pane))
  (note-sheet-transformation-changed
    (interactor-pane)
    (command-menu-pane)
    (top-level-sheet)
    (push-button-pane)
    (hbox-pane)
    (toggle-button-pane)
    (outlined-pane)
    (radio-box-pane)
    (slider-pane)
    (spacing-pane)
    (scroll-bar-shaft-pane)
    (scroll-bar-target-pane)
    (vbox-pane)
    (scroll-bar-pane)
    (scroller-pane)
    (application-pane)
    (clim-stream-pane))
  #+Genera (clos-internals:operation-handled-p
             (standard-graft t)
             (interactor-pane t)
             (toggle-button-pane t)
             (scroll-bar-target-pane t)
             (push-button-pane t)
             (vbox-pane t)
             (top-level-sheet t)
             (outlined-pane t)
             (hbox-pane t)
             (slider-pane t)
             (application-pane t))
  (output-recording-stream-p
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (output-stream-p
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (pane-display-function
    (command-menu-pane)
    (interactor-pane)
    (application-pane))
  (pane-frame
    (top-level-sheet)
    (interactor-pane)
    (clim-stream-pane)
    (outlined-pane))
  (pane-needs-redisplay
    (command-menu-pane))
  (pane-scroller
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (pane-viewport
    (top-level-sheet)
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (pane-viewport-region
    (top-level-sheet)
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (panep
    (toggle-button-pane)
    (outlined-pane)
    (vbox-pane)
    (push-button-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane))
  (pointer-motion-pending
    (clim-stream-pane))
  ((setf pointer-motion-pending)
    (t interactor-pane)
    (t command-menu-pane)
    (t application-pane)
    (t clim-stream-pane))
  (port
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (standard-graft)
    (clim-stream-pane))
  (print-object
    (standard-graft t)
    (toggle-button-pane t)
    (scroll-bar-target-pane t)
    (push-button-pane t)
    (vbox-pane t)
    (top-level-sheet t)
    (outlined-pane t)
    (hbox-pane t)
    (slider-pane t)
    (interactor-pane t))
  #+Genera (clos-internals::print-self
             (standard-graft t t t)
             (toggle-button-pane t t t)
             (scroll-bar-target-pane t t t)
             (push-button-pane t t t)
             (vbox-pane t t t)
             (top-level-sheet t t t)
             (outlined-pane t t t)
             (hbox-pane t t t)
             (slider-pane t t t)
             (interactor-pane t t t))
  (prompt-for-accept
    (interactor-pane t textual-view)
    (application-pane t textual-dialog-view)
    (application-pane t textual-view)
    (clim-stream-pane t textual-view)
    (clim-stream-pane t textual-dialog-view))
  (queue-event
    (top-level-sheet pointer-exit-event)
    (top-level-sheet key-press-event)
    (top-level-sheet key-release-event)
    (top-level-sheet pointer-enter-event)
    (vbox-pane pointer-exit-event)
    (vbox-pane pointer-motion-event)
    (vbox-pane pointer-button-release-event)
    (vbox-pane pointer-enter-event)
    (outlined-pane pointer-exit-event)
    (outlined-pane pointer-motion-event)
    (outlined-pane pointer-button-release-event)
    (outlined-pane pointer-enter-event)
    (scroller-pane pointer-exit-event)
    (scroller-pane pointer-enter-event)
    (table-pane pointer-exit-event)
    (table-pane pointer-motion-event)
    (table-pane pointer-button-press-event)
    (table-pane pointer-button-release-event)
    (table-pane pointer-enter-event)
    (viewport t)
    (interactor-pane pointer-motion-event)
    (interactor-pane pointer-button-release-event)
    (interactor-pane pointer-exit-event)
    (interactor-pane pointer-button-press-event)
    (interactor-pane key-press-event)
    (interactor-pane key-release-event)
    (interactor-pane pointer-enter-event)
    (command-menu-pane pointer-motion-event)
    (command-menu-pane pointer-exit-event)
    (command-menu-pane pointer-button-press-event)
    (command-menu-pane pointer-button-release-event)
    (command-menu-pane pointer-enter-event)
    (spacing-pane pointer-exit-event)
    (spacing-pane pointer-motion-event)
    (spacing-pane pointer-button-release-event)
    (spacing-pane pointer-enter-event)
    (slider-pane t)
    (hbox-pane pointer-exit-event)
    (hbox-pane pointer-motion-event)
    (hbox-pane pointer-enter-event)
    (toggle-button-pane t)
    (push-button-pane t)
    (radio-box-pane pointer-exit-event)
    (radio-box-pane pointer-enter-event)
    (scroll-bar-pane pointer-exit-event)
    (scroll-bar-pane pointer-enter-event)
    (scroll-bar-shaft-pane t)
    (scroll-bar-target-pane t)
    (application-pane pointer-motion-event)
    (application-pane pointer-button-release-event)
    (application-pane pointer-exit-event)
    (application-pane key-press-event)
    (application-pane key-release-event)
    (application-pane pointer-button-press-event)
    (application-pane pointer-enter-event)
    (clim-stream-pane pointer-motion-event)
    (clim-stream-pane pointer-exit-event)
    (clim-stream-pane pointer-button-press-event)
    (clim-stream-pane pointer-button-release-event)
    (clim-stream-pane pointer-enter-event))
  (realize-mirror)
  (receive-gesture
    (top-level-sheet pointer-exit-event)
    (top-level-sheet key-press-event)
    (top-level-sheet pointer-enter-event)
    (viewport pointer-exit-event)
    (viewport pointer-motion-event)
    (viewport pointer-button-press-event)
    (viewport pointer-button-release-event)
    (viewport pointer-enter-event)
    (interactor-pane pointer-button-press-event)
    (interactor-pane key-press-event)
    (interactor-pane character)
    (interactor-pane pointer-button-release-event)
    (slider-pane pointer-motion-event)
    (slider-pane pointer-exit-event)
    (slider-pane pointer-button-press-event)
    (slider-pane pointer-button-release-event)
    (slider-pane pointer-enter-event)
    (toggle-button-pane pointer-motion-event)
    (toggle-button-pane pointer-exit-event)
    (toggle-button-pane pointer-button-press-event)
    (toggle-button-pane pointer-button-release-event)
    (toggle-button-pane pointer-enter-event)
    (push-button-pane pointer-motion-event)
    (push-button-pane pointer-exit-event)
    (push-button-pane pointer-button-press-event)
    (push-button-pane pointer-button-release-event)
    (push-button-pane pointer-enter-event)
    (command-menu-pane pointer-button-release-event)
    (command-menu-pane pointer-button-press-event)
    (scroll-bar-shaft-pane pointer-motion-event)
    (scroll-bar-shaft-pane pointer-exit-event)
    (scroll-bar-shaft-pane pointer-button-press-event)
    (scroll-bar-shaft-pane pointer-button-release-event)
    (scroll-bar-shaft-pane pointer-enter-event)
    (scroll-bar-target-pane pointer-motion-event)
    (scroll-bar-target-pane pointer-button-press-event)
    (scroll-bar-target-pane pointer-button-release-event)
    (scroll-bar-target-pane pointer-exit-event)
    (scroll-bar-target-pane pointer-enter-event)
    (application-pane key-press-event)
    (application-pane pointer-button-press-event)
    (application-pane character)
    (application-pane pointer-button-release-event)
    (clim-stream-pane pointer-button-release-event)
    (clim-stream-pane pointer-button-press-event))
  (redisplayable-stream-p
    (application-pane))
  (region-intersection
    (slider-pane t))
  (repaint-sheet
    (vbox-pane t)
    (outlined-pane t)
    (scroller-pane t)
    (table-pane t)
    (scroll-bar-pane t)
    (spacing-pane t)
    (hbox-pane t)
    (scroll-bar-target-pane t)
    (scroll-bar-shaft-pane t)
    (viewport t)
    (slider-pane t)
    (radio-box-pane t)
    (toggle-button-pane t)
    (push-button-pane t))
  (resize-sheet
    (top-level-sheet t t)
    (vbox-pane t t)
    (outlined-pane t t)
    (command-menu-pane t t)
    (hbox-pane t t)
    (push-button-pane t t)
    (toggle-button-pane t t)
    (radio-box-pane t t)
    (spacing-pane t t)
    (slider-pane t t)
    (scroller-pane t t)
    (table-pane t t)
    (viewport t t)
    (interactor-pane t t)
    (scroll-bar-pane t t)
    (scroll-bar-target-pane t t)
    (scroll-bar-shaft-pane t t)
    (application-pane t t)
    (clim-stream-pane t t))
  (scroller-pane-horizontal-scroll-bar
    (scroller-pane))
  (silica::scroller-pane-scroll-bar-policy
    (scroller-pane))
  (scroller-pane-vertical-scroll-bar
    (scroller-pane))
  #+Genera (clos-internals::send-if-handles
             (interactor-pane t)
             (vbox-pane t)
             (outlined-pane t)
             (top-level-sheet t)
             (push-button-pane t)
             (toggle-button-pane t)
             (hbox-pane t)
             (slider-pane t)
             (application-pane t))
  (shared-initialize
    (push-button-pane t)
    (hbox-pane t)
    (toggle-button-pane t)
    (radio-box-pane t)
    (slider-pane t)
    (interactor-pane t)
    (scroll-bar-pane t)
    (vbox-pane t)
    (command-menu-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (sheet-actual-native-edges*
    (top-level-sheet))
  (sheet-adopt-child
    (hbox-pane toggle-button-pane)
    (hbox-pane scroll-bar-target-pane)
    (hbox-pane scroll-bar-shaft-pane)
    (hbox-pane push-button-pane)
    (outlined-pane radio-box-pane)
    (outlined-pane spacing-pane)
    (outlined-pane scroller-pane)
    (outlined-pane command-menu-pane)
    (outlined-pane clim-stream-pane)
    (outlined-pane hbox-pane)
    (radio-box-pane hbox-pane)
    (spacing-pane vbox-pane)
    (spacing-pane hbox-pane)
    (spacing-pane slider-pane)
    (vbox-pane scroll-bar-shaft-pane)
    (vbox-pane outlined-pane)
    (vbox-pane vbox-pane)
    (vbox-pane scroll-bar-target-pane)
    (scroll-bar-pane spacing-pane)
    (table-pane scroll-bar-pane)
    (table-pane viewport)
    (scroller-pane table-pane)
    (viewport application-pane)
    (viewport clim-stream-pane)
    (viewport interactor-pane)
    (standard-graft top-level-sheet)
    (top-level-sheet outlined-pane)
    (top-level-sheet vbox-pane)
    (interactor-pane push-button-pane)
    (interactor-pane scroller-pane)
    (interactor-pane slider-pane))
  ((setf sheet-cached-device-region)
    (t vbox-pane)
    (t outlined-pane)
    (t scroller-pane)
    (t table-pane)
    (t scroll-bar-pane)
    (t spacing-pane)
    (t hbox-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t viewport)
    (t interactor-pane)
    (t slider-pane)
    (t radio-box-pane)
    (t toggle-button-pane)
    (t push-button-pane)
    (t command-menu-pane)
    (t application-pane)
    (t clim-stream-pane))
  ((setf sheet-cached-device-transformation)
    (t standard-graft)
    (t interactor-pane)
    (t command-menu-pane)
    (t top-level-sheet)
    (t vbox-pane)
    (t outlined-pane)
    (t scroller-pane)
    (t table-pane)
    (t scroll-bar-pane)
    (t spacing-pane)
    (t hbox-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t viewport)
    (t slider-pane)
    (t radio-box-pane)
    (t toggle-button-pane)
    (t push-button-pane)
    (t application-pane)
    (t clim-stream-pane))
  (sheet-child
    (top-level-sheet)
    (outlined-pane)
    (radio-box-pane)
    (spacing-pane)
    (scroller-pane)
    (scroll-bar-pane)
    (viewport))
  (sheet-children
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (viewport)
    (interactor-pane)
    (radio-box-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-cursor)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane))
  (sheet-device-region
    (top-level-sheet)
    (outlined-pane)
    (vbox-pane)
    (spacing-pane)
    (scroll-bar-pane)
    (table-pane)
    (scroller-pane)
    (scroll-bar-target-pane)
    (hbox-pane)
    (scroll-bar-shaft-pane)
    (interactor-pane)
    (viewport)
    (slider-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (sheet-device-transformation
    (standard-graft)
    (top-level-sheet)
    (outlined-pane)
    (vbox-pane)
    (spacing-pane)
    (scroll-bar-pane)
    (table-pane)
    (scroller-pane)
    (scroll-bar-target-pane)
    (hbox-pane)
    (scroll-bar-shaft-pane)
    (interactor-pane)
    (viewport)
    (slider-pane)
    (toggle-button-pane)
    (radio-box-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (sheet-direct-mirror
    (standard-graft)
    (vbox-pane)
    (top-level-sheet)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-direct-mirror)
    (t standard-graft))
  (sheet-disown-child
    (interactor-pane t))
  (sheet-enabled-p
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (viewport)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-enabled-p)
    (t push-button-pane)
    (t hbox-pane)
    (t outlined-pane)
    (t toggle-button-pane)
    (t radio-box-pane)
    (t slider-pane)
    (t spacing-pane)
    (t interactor-pane)
    (t scroller-pane)
    (t scroll-bar-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t vbox-pane)
    (t viewport)
    (t table-pane)
    (t command-menu-pane)
    (t top-level-sheet)
    (t application-pane)
    (t clim-stream-pane))
  (sheet-event-queue
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (viewport)
    (radio-box-pane)
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-event-queue)
    (t top-level-sheet)
    (t vbox-pane)
    (t outlined-pane)
    (t scroller-pane)
    (t table-pane)
    (t scroll-bar-pane)
    (t spacing-pane)
    (t hbox-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t viewport)
    (t interactor-pane)
    (t slider-pane)
    (t radio-box-pane)
    (t toggle-button-pane)
    (t push-button-pane)
    (t command-menu-pane)
    (t application-pane)
    (t clim-stream-pane))
  (sheet-medium
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-medium)
    (t scroller-pane)
    (t table-pane)
    (t scroll-bar-pane)
    (t spacing-pane)
    (t hbox-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t vbox-pane)
    (t viewport)
    (t interactor-pane)
    (t push-button-pane)
    (t slider-pane))
  (sheet-mirror
    (top-level-sheet)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (sheet-mirrored-ancestor
    (top-level-sheet)
    (standard-graft)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (viewport)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (sheet-native-region
    (top-level-sheet))
  (sheet-native-region*
    (top-level-sheet))
  (sheet-native-transformation
    (standard-graft)
    (top-level-sheet)
    (interactor-pane)
    (viewport)
    (table-pane)
    (scroller-pane)
    (outlined-pane)
    (vbox-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-native-transformation)
    (t standard-graft)
    (t top-level-sheet))
  (sheet-parent
    (standard-graft)
    (interactor-pane)
    (command-menu-pane)
    (outlined-pane)
    (vbox-pane)
    (top-level-sheet)
    (viewport)
    (table-pane)
    (scroller-pane)
    (push-button-pane)
    (slider-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-parent)
    (t push-button-pane)
    (t hbox-pane)
    (t toggle-button-pane)
    (t radio-box-pane)
    (t slider-pane)
    (t spacing-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t vbox-pane)
    (t viewport)
    (t scroll-bar-pane)
    (t table-pane)
    (t interactor-pane)
    (t scroller-pane)
    (t outlined-pane)
    (t command-menu-pane)
    (t top-level-sheet)
    (t application-pane)
    (t clim-stream-pane))
  (sheet-region
    (top-level-sheet)
    (viewport)
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (interactor-pane)
    (command-menu-pane)
    (spacing-pane)
    (slider-pane)
    (hbox-pane)
    (toggle-button-pane)
    (push-button-pane)
    (radio-box-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (application-pane)
    (standard-graft)
    (clim-stream-pane))
  ((setf sheet-region)
    (t standard-graft)
    (t top-level-sheet)
    (t vbox-pane)
    (t outlined-pane)
    (t command-menu-pane)
    (t hbox-pane)
    (t push-button-pane)
    (t toggle-button-pane)
    (t radio-box-pane)
    (t spacing-pane)
    (t slider-pane)
    (t scroller-pane)
    (t table-pane)
    (t viewport)
    (t interactor-pane)
    (t scroll-bar-pane)
    (t scroll-bar-target-pane)
    (t scroll-bar-shaft-pane)
    (t application-pane)
    (t clim-stream-pane))
  (sheet-transformation
    (vbox-pane)
    (outlined-pane)
    (scroller-pane)
    (table-pane)
    (scroll-bar-pane)
    (viewport)
    (spacing-pane)
    (hbox-pane)
    (scroll-bar-target-pane)
    (scroll-bar-shaft-pane)
    (interactor-pane)
    (slider-pane)
    (radio-box-pane)
    (toggle-button-pane)
    (push-button-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf sheet-transformation)
    (t interactor-pane)
    (t command-menu-pane)
    (t push-button-pane)
    (t hbox-pane)
    (t toggle-button-pane)
    (t outlined-pane)
    (t radio-box-pane)
    (t slider-pane)
    (t spacing-pane)
    (t scroll-bar-shaft-pane)
    (t scroll-bar-target-pane)
    (t vbox-pane)
    (t scroll-bar-pane)
    (t scroller-pane)
    (t application-pane)
    (t clim-stream-pane))
  (stream-accept
    (interactor-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (stream-add-character-output
    (interactor-pane t t t t t)
    (application-pane t t t t t))
  (stream-add-output-record
    (command-menu-pane t)
    (interactor-pane t)
    (clim-stream-pane t)
    (application-pane t))
  (stream-add-string-output
    (command-menu-pane t t t t t t t)
    (interactor-pane t t t t t t t)
    (clim-stream-pane t t t t t t t)
    (application-pane t t t t t t t))
  (stream-advance-cursor-line
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-character-size
    (interactor-pane t)
    (application-pane t))
  (stream-character-width
    (interactor-pane t)
    (application-pane t))
  (stream-close-text-output-record
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  #+Genera (stream-compatible-cursor-position
             (interactor-pane))
  #+Genera (stream-compatible-output-as-presentation-1
             (interactor-pane t t)
             (application-pane t t))
  #+Genera (stream-compatible-size-in-characters
             (interactor-pane))
  ((setf stream-current-line-height)
    (t command-menu-pane)
    (t interactor-pane)
    (t clim-stream-pane)
    (t application-pane))
  (stream-current-output-record
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  ((setf stream-current-output-record)
    (t command-menu-pane)
    (t interactor-pane)
    (t clim-stream-pane)
    (t application-pane))
  (stream-current-redisplay-record
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf stream-current-redisplay-record)
    (t command-menu-pane)
    (t application-pane)
    (t clim-stream-pane))
  (stream-cursor-position
    (interactor-pane)
    (command-menu-pane)
    (top-level-sheet)
    (application-pane)
    (clim-stream-pane))
  (stream-default-text-margin
    (interactor-pane)
    (application-pane))
  ((setf stream-default-text-margin)
    (t command-menu-pane)
    (t interactor-pane)
    (t application-pane)
    (t clim-stream-pane))
  (stream-default-view
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf stream-default-view)
    (t clim-stream-pane)
    (t application-pane))
  (stream-drawing-p
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-end-of-line-action
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  ((setf stream-end-of-line-action)
    (t command-menu-pane)
    (t interactor-pane)
    (t clim-stream-pane)
    (t application-pane))
  (stream-end-of-page-action
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  ((setf stream-end-of-page-action)
    (t command-menu-pane)
    (t interactor-pane)
    (t clim-stream-pane)
    (t application-pane))
  (stream-ensure-cursor-visible
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (stream-force-output
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-fresh-line
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-handle-line-wrap
    (application-pane t t t t t))
  ((setf stream-highlighted-presentation)
    (t command-menu-pane)
    (t interactor-pane)
    (t clim-stream-pane)
    (t application-pane))
  (stream-input-buffer
    (interactor-pane)
    (command-menu-pane)
    (top-level-sheet)
    (application-pane)
    (clim-stream-pane))
  (stream-input-wait
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-line-height
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-next-tab-column
    (application-pane t t))
  (stream-note-line-height-change
    (interactor-pane t t t t t)
    (application-pane t t t t t)
    (clim-stream-pane t t t t t))
  (stream-output-glyph-buffer
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (stream-output-history
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-output-history-position
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (stream-pointer-position
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-primary-pointer
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-read-gesture
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-recording-p
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  ((setf stream-recording-p)
    (t command-menu-pane)
    (t interactor-pane)
    (t application-pane)
    (t clim-stream-pane))
  (stream-redisplaying-p
    (command-menu-pane)
    (clim-stream-pane)
    (application-pane))
  ((setf stream-redisplaying-p)
    (t application-pane))
  (stream-replay
    (top-level-sheet)
    (interactor-pane)
    (command-menu-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-restore-input-focus
    (clim-stream-pane t))
  (stream-scan-character-for-writing
    (interactor-pane t t t t t)
    (application-pane t t t t t))
  (stream-scan-string-for-writing
    (command-menu-pane t t t t t t t)
    (interactor-pane t t t t t t t)
    (clim-stream-pane t t t t t t t)
    (application-pane t t t t t t t))
  (stream-set-cursor-position
    (command-menu-pane t t)
    (interactor-pane t t)
    (clim-stream-pane t t)
    (application-pane t t))
  (stream-set-cursor-position-internal
    (command-menu-pane t t)
    (interactor-pane t t)
    (clim-stream-pane t t)
    (application-pane t t))
  (stream-set-input-focus
    (clim-stream-pane))
  (stream-set-pointer-position
    (application-pane t t))
  (stream-string-output-size
    (interactor-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (stream-string-width
    (interactor-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (stream-supports-input-editing
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (stream-tab-size
    (application-pane t))
  (stream-terpri
    (application-pane))
  (stream-text-cursor
    (application-pane))
  (stream-text-margin
    (interactor-pane)
    (application-pane))
  ((setf stream-text-output-record)
    (t application-pane))
  (stream-unread-gesture
    (interactor-pane t)
    (application-pane t))
  (stream-vertical-spacing
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (stream-write-char
    (interactor-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (stream-write-string
    (command-menu-pane t)
    (interactor-pane t)
    (clim-stream-pane t)
    (application-pane t))
  (text-size
    (application-pane t))
  (update-mirror-region)
  (update-mirror-transformation)
  (update-scroll-bar-value
    (scroll-bar-shaft-pane t t t t))
  (update-slider-value
    (slider-pane t t t))
  (value-changed-callback
    (slider-pane t t t)
    (toggle-button-pane radio-box-pane t t)
    (radio-box-pane t t t))
  (viewport-region-changed
    (interactor-pane t)
    (application-pane t)
    (clim-stream-pane t))
  (viewport-viewport-region
    (viewport))
  ((setf viewport-viewport-region)
    (t viewport))
  #+Genera (clos-internals::which-operations
             (standard-graft)
             (toggle-button-pane)
             (scroll-bar-target-pane)
             (push-button-pane)
             (vbox-pane)
             (top-level-sheet)
             (outlined-pane)
             (hbox-pane)
             (slider-pane)
             (interactor-pane))
  (window-clear
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (window-erase-viewport
    (command-menu-pane)
    (interactor-pane)
    (clim-stream-pane)
    (application-pane))
  (window-expose
    (clim-stream-pane))
  (window-modifier-state
    (command-menu-pane)
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (window-refresh
    (application-pane))
  (window-set-inside-size
    (clim-stream-pane t t))
  (window-set-viewport-position
    (interactor-pane t t)
    (clim-stream-pane t t)
    (application-pane t t))
  (window-shift-visible-region
    (interactor-pane t t t t t t t t)
    (clim-stream-pane t t t t t t t t)
    (application-pane t t t t t t t t))
  (window-viewport
    (interactor-pane)
    (application-pane))
  (window-viewport-position
    (interactor-pane)
    (application-pane)
    (clim-stream-pane))
  (window-visibility
    (clim-stream-pane))
  ((setf window-visibility)
    (t clim-stream-pane)))


;;; (generate-prefill-dispatch-caches 'medium)

(prefill-dispatch-caches
  (degraft-medium)
  (engraft-medium)
  (invoke-with-drawing-options)
  (invoke-with-text-style)
  (medium-+y-upward-p)
  ((setf medium-+y-upward-p))
  (medium-background)
  (medium-default-text-style)
  (medium-draw-ellipse*)
  (medium-draw-line*)
  (medium-draw-polygon*)
  (medium-draw-rectangle*)
  (medium-draw-text*)
  (medium-foreground)
  (medium-ink)
  ((setf medium-ink))
  (medium-line-style)
  ((setf medium-line-style))
  (medium-merged-text-style)
  (medium-text-style)
  (medium-transformation)
  ((setf medium-transformation))
  #+Genera (clos-internals:operation-handled-p)
  (port)
  (print-object)
  #+Genera (clos-internals::print-self)
  #+Genera (clos-internals::send-if-handles)
  (stream-string-output-size)
  (stream-string-width)
  (text-size)
  (text-style-width)
  #+Genera (clos-internals::which-operations))


;;; (generate-prefill-dispatch-caches 'port)

(prefill-dispatch-caches
  (degraft-medium)
  (disable-mirror)
  (distribute-event)
  (distribute-event-1)
  (enable-mirror)
  (engraft-medium)
  (initialize-menu)
  (make-frame-manager)
  (make-medium)
  (mirror-inside-edges*)
  (mirror-native-edges*)
  (mirror-region)
  (mirror-region*)
  (mirror-region-updated)
  #+Genera (clos-internals:operation-handled-p)
  ((setf port))
  (medium-copy-area)
  (port-event-loop)
  (port-glyph-for-character)
  (port-graft-class)
  (port-grafts)
  ((setf port-grafts))
  ((setf port-keyboard-input-focus))
  (port-note-cursor-change)
  (port-pointer)
  ((setf port-pointer))
  ((setf port-process))
  (port-server-path)
  (port-trace-thing)
  (port-type)
  (print-object)
  (clos-internals::print-self)
  (process-next-event)
  (realize-graft)
  (realize-mirror)
  (restart-port)
  #+Genera (clos-internals::send-if-handles)
  (set-sheet-mirror-edges*)
  (shared-initialize)
  (standardize-text-style)
  (text-style-ascent)
  (text-style-descent)
  (text-style-height)
  (text-style-mapping)
  ((setf text-style-mapping))
  (text-style-mapping*)
  (text-style-width)
  (update-mirror-region)
  (update-mirror-region-1)
  (update-mirror-transformation)
  (update-mirror-transformation-1)
  #+Genera (clos-internals::which-operations))


;;; (generate-prefill-dispatch-caches 'fundamental-stream)

(prefill-dispatch-caches
  (allocate-space)
  (bounding-rectangle*)
  (change-space-requirements)
  (child-containing-position)
  (children-overlapping-region)
  (clear-output-history)
  (clear-space-requirement-cache)
  (compose-space)
  (decode-stream-for-writing
    (standard-input-editing-stream))
  (default-space-requirements)
  (dispatch-event)
  (do-input-buffer-screen-real-estate
    (standard-input-editing-stream t))
  (do-text-screen-real-estate)
  (encode-stream-after-writing)
  (engraft-medium)
  (erase-input-buffer
    (standard-input-editing-stream))
  (extended-output-stream-p
    (filling-stream)
    (accept-values-stream))
  (filling-stream-handle-line-break
    (filling-stream))
  (filling-stream-write-buffer
    (filling-stream))
  (find-or-add-query
    (accept-values-stream t t t t t t t))
  (get-text-output-record)
  (graft)
  (handle-event)
  (handle-repaint)
  (history-replace-input
    (kill-ring-history standard-input-editing-stream t))
  (incremental-redisplay
    (accept-values-stream t t t t t t))
  (initialize-input-editing-stream
    (standard-input-editing-stream))
  (initialize-instance)
  (initialize-menu)
  (initialize-position
    (standard-input-editing-stream))
  (input-buffer-input-position->cursor-position
    (standard-input-editing-stream))
  (input-editing-stream-p
    (standard-input-editing-stream))
  (input-editor-buffer
    (standard-input-editing-stream))
  (invalidate-cached-regions)
  (invalidate-cached-transformations)
  (invoke-formatting-cell
    (accept-values-stream t))
  (invoke-with-drawing-options
    (accept-values-stream t))
  (invoke-with-input-editor-typeout
    (standard-input-editing-stream t))
  (invoke-with-new-output-record
    (standard-input-editing-stream t t t)
    (filling-stream t t t)
    (accept-values-stream t t t))
  (invoke-with-output-recording-options
    (standard-input-editing-stream t t t)
    (filling-stream t t t)
    (accept-values-stream t t t))
  (invoke-with-sheet-medium
    (accept-values-stream t))
  (invoke-with-text-style
    (standard-input-editing-stream t t t)
    (accept-values-stream t t t))
  (map-sheet-position-to-child)
  (medium-+y-upward-p
    (accept-values-stream))
  ((setf medium-+y-upward-p)
    (t accept-values-stream))
  (medium-background)
  (medium-default-text-style
    (accept-values-stream))
  (medium-draw-ellipse*
    (accept-values-stream t t t t t t t t t))
  (medium-draw-line*
    (accept-values-stream t t t t))
  (medium-draw-polygon*
    (accept-values-stream t t t))
  (medium-draw-rectangle*)
  (medium-draw-text*)
  (medium-foreground)
  (medium-ink)
  (medium-line-style)
  (medium-merged-text-style)
  (medium-text-style)
  (medium-transformation
    (accept-values-stream))
  ((setf medium-transformation))
  (mirror-region-updated)
  (move-and-resize-sheet)
  (move-sheet)
  (note-layout-mixin-region-changed)
  (note-sheet-adopted)
  (note-sheet-degrafted)
  (note-sheet-disabled)
  (note-sheet-enabled)
  (note-sheet-grafted)
  (note-sheet-region-changed)
  (note-sheet-transformation-changed)
  #+Genera (clos-internals:operation-handled-p
             (standard-input-editing-stream t))
  ((setf original-stream-recording-p)
    (t standard-input-editing-stream))
  (output-recording-stream-p
    (standard-input-editing-stream))
  (output-stream-p)
  (pane-display-function)
  (pane-frame)
  (pane-needs-redisplay)
  (pane-scroller)
  (pane-viewport)
  (pane-viewport-region)
  (pointer-motion-pending)
  ((setf pointer-motion-pending))
  (port
    (standard-input-editing-stream)
    (accept-values-stream))
  (presentation-replace-input
    (standard-input-editing-stream t t t))
  (print-object)
  #+Genera (clos-internals::print-self)
  (prompt-for-accept
    (standard-input-editing-stream t textual-view)
    (accept-values-stream t textual-dialog-view))
  (queue-event)
  (queue-rescan
    (standard-input-editing-stream))
  (realize-mirror)
  (receive-gesture
    (standard-input-editing-stream pointer-button-press-event)
    (standard-input-editing-stream key-press-event)
    (standard-input-editing-stream character)
    (standard-input-editing-stream pointer-button-release-event))
  (redisplayable-stream-p
    (accept-values-stream))
  (redraw-input-buffer
    (standard-input-editing-stream))
  (remove-activation-gesture
    (standard-input-editing-stream))
  (repaint-sheet)
  (replace-input
    (standard-input-editing-stream t))
  (rescan-if-necessary
    (standard-input-editing-stream))
  (reset-cursor-position
    (standard-input-editing-stream))
  (reset-scan-pointer
    (standard-input-editing-stream))
  (resize-sheet)
  #+Genera (clos-internals::send-if-handles
             (standard-input-editing-stream t))
  (shared-initialize)
  (sheet-actual-native-edges*)
  (sheet-adopt-child)
  ((setf sheet-cached-device-region))
  ((setf sheet-cached-device-transformation))
  (sheet-child)
  (sheet-children)
  (sheet-device-region)
  (sheet-device-transformation)
  (sheet-direct-mirror)
  (sheet-disown-child)
  (sheet-enabled-p)
  ((setf sheet-enabled-p))
  (sheet-event-queue)
  ((setf sheet-event-queue))
  (sheet-medium)
  ((setf sheet-medium))
  (sheet-mirror)
  (sheet-mirrored-ancestor)
  (sheet-native-region)
  (sheet-native-region*)
  (sheet-native-transformation)
  ((setf sheet-native-transformation))
  (sheet-parent)
  ((setf sheet-parent))
  (sheet-region)
  ((setf sheet-region))
  (sheet-transformation)
  ((setf sheet-transformation))
  (start-cursor-position
    (standard-input-editing-stream))
  (stream-accept
    (standard-input-editing-stream t)
    (accept-values-stream t))
  (stream-add-character-output)
  (stream-add-output-record)
  (stream-add-string-output)
  (stream-advance-cursor-line)
  (stream-character-size)
  (stream-character-width
    (accept-values-stream t))
  (stream-close-text-output-record
    (standard-input-editing-stream)
    (filling-stream)
    (accept-values-stream))
  #+Genera (stream-compatible-cursor-position
             (standard-input-editing-stream))
  #+Genera (stream-compatible-output-as-presentation-1)
  #+Genera (stream-compatible-size-in-characters)
  ((setf stream-current-line-height))
  (stream-current-output-record
    (accept-values-stream))
  ((setf stream-current-output-record)
    (t accept-values-stream))
  (stream-current-redisplay-record
    (accept-values-stream))
  ((setf stream-current-redisplay-record)
    (t accept-values-stream))
  (stream-cursor-position
    (standard-input-editing-stream)
    (accept-values-stream))
  (stream-default-text-margin)
  ((setf stream-default-text-margin))
  (stream-default-view
    (standard-input-editing-stream)
    (filling-stream)
    (accept-values-stream))
  ((setf stream-default-view)
    (t accept-values-stream))
  (stream-drawing-p
    (standard-input-editing-stream)
    (filling-stream)
    (accept-values-stream))
  (stream-end-of-line-action
    (accept-values-stream))
  ((setf stream-end-of-line-action)
    (t accept-values-stream))
  (stream-end-of-page-action
    (accept-values-stream))
  ((setf stream-end-of-page-action)
    (t accept-values-stream))
  (stream-ensure-cursor-visible
    (accept-values-stream))
  (stream-force-output
    (filling-stream)
    (accept-values-stream))
  (stream-fresh-line
    (standard-input-editing-stream)
    (accept-values-stream))
  (stream-handle-line-wrap)
  ((setf stream-highlighted-presentation))
  (stream-input-buffer)
  (stream-input-wait)
  (stream-insertion-pointer
    (standard-input-editing-stream))
  ((setf stream-insertion-pointer)
    (t standard-input-editing-stream))
  (stream-line-height
    (accept-values-stream))
  (stream-next-tab-column)
  (stream-note-line-height-change)
  (stream-output-glyph-buffer
    (accept-values-stream))
  (stream-output-history
    (accept-values-stream))
  (stream-output-history-position
    (accept-values-stream))
  (stream-pointer-position)
  (stream-primary-pointer
    (standard-input-editing-stream))
  (stream-process-gesture
    (standard-input-editing-stream key-press-event t)
    (standard-input-editing-stream character t)
    (standard-input-editing-stream pointer-button-release-event t))
  (stream-read-gesture
    (standard-input-editing-stream))
  (stream-recording-p
    (standard-input-editing-stream)
    (accept-values-stream))
  ((setf stream-recording-p)
    (t accept-values-stream))
  (stream-redisplaying-p
    (accept-values-stream))
  ((setf stream-redisplaying-p)
    (t accept-values-stream))
  (stream-replay)
  (stream-rescanning-p
    (standard-input-editing-stream))
  (stream-restore-input-focus)
  (stream-scan-character-for-writing)
  (stream-scan-string-for-writing
    (accept-values-stream t t t t t t t))
  (stream-scan-pointer
    (standard-input-editing-stream))
  ((setf stream-scan-pointer)
    (t standard-input-editing-stream))
  (stream-set-cursor-position
    (accept-values-stream t t))
  (stream-set-cursor-position-internal)
  (stream-set-input-focus)
  (stream-set-pointer-position)
  (stream-string-output-size)
  (stream-string-width
    (accept-values-stream t))
  (stream-supports-input-editing
    (standard-input-editing-stream))
  (stream-tab-size)
  (stream-terpri)
  (stream-text-cursor)
  (stream-text-margin
    (accept-values-stream))
  ((setf stream-text-output-record))
  (stream-unread-gesture
    (standard-input-editing-stream t))
  (stream-vertical-spacing
    (accept-values-stream))
  (stream-write-char
    (standard-input-editing-stream t)
    (filling-stream t)
    (accept-values-stream t))
  (stream-write-string
    (standard-input-editing-stream t)
    (filling-stream t)
    (accept-values-stream t))
  (text-size)
  (update-mirror-region)
  (update-mirror-transformation)
  (viewport-region-changed)
  #+Genera (clos-internals::which-operations)
  (window-clear)
  (window-erase-viewport)
  (window-expose)
  (window-modifier-state)
  (window-refresh)
  (window-set-inside-size)
  (window-set-viewport-position)
  (window-shift-visible-region)
  (window-viewport)
  (window-viewport-position)
  (window-visibility)
  ((setf window-visibility))
  (write-buffer-and-continue
    (filling-stream t)))


;;; (generate-prefill-dispatch-caches 'encapsulating-stream)

(prefill-dispatch-caches
  (decode-stream-for-writing)
  (do-input-buffer-screen-real-estate)
  (erase-input-buffer)
  (extended-output-stream-p)
  (filling-stream-handle-line-break)
  (filling-stream-write-buffer)
  (find-or-add-query)
  (history-replace-input)
  (incremental-redisplay)
  (initialize-input-editing-stream)
  (initialize-position)
  (input-buffer-input-position->cursor-position)
  (input-editing-stream-p)
  (input-editor-buffer)
  (invoke-formatting-cell)
  (invoke-with-drawing-options)
  (invoke-with-input-editor-typeout)
  (invoke-with-new-output-record)
  (invoke-with-output-recording-options)
  (invoke-with-sheet-medium)
  (invoke-with-text-style)
  (medium-+y-upward-p)
  ((setf medium-+y-upward-p))
  (medium-default-text-style)
  (medium-draw-ellipse*)
  (medium-draw-line*)
  (medium-draw-polygon*)
  (medium-transformation)
  #+Genera (clos-internals:operation-handled-p)
  ((setf original-stream-recording-p))
  (output-recording-stream-p)
  (port)
  (presentation-replace-input)
  (prompt-for-accept)
  (queue-rescan)
  (receive-gesture)
  (redisplayable-stream-p)
  (redraw-input-buffer)
  (remove-activation-gesture)
  (replace-input)
  (rescan-if-necessary)
  (reset-cursor-position)
  (reset-scan-pointer)
  #+Genera (clos-internals::send-if-handles)
  (start-cursor-position)
  (stream-accept)
  (stream-character-width)
  (stream-close-text-output-record)
  #+Genera (stream-compatible-cursor-position)
  (stream-current-output-record)
  ((setf stream-current-output-record))
  (stream-current-redisplay-record)
  ((setf stream-current-redisplay-record))
  (stream-cursor-position)
  (stream-default-view)
  ((setf stream-default-view))
  (stream-drawing-p)
  (stream-end-of-line-action)
  ((setf stream-end-of-line-action))
  (stream-end-of-page-action)
  ((setf stream-end-of-page-action))
  (stream-ensure-cursor-visible)
  (stream-force-output)
  (stream-fresh-line)
  (stream-insertion-pointer)
  ((setf stream-insertion-pointer))
  (stream-line-height)
  (stream-output-glyph-buffer)
  (stream-output-history)
  (stream-output-history-position)
  (stream-primary-pointer)
  (stream-process-gesture)
  (stream-read-gesture)
  (stream-recording-p)
  ((setf stream-recording-p))
  (stream-redisplaying-p)
  ((setf stream-redisplaying-p))
  (stream-rescanning-p)
  (stream-scan-pointer)
  ((setf stream-scan-pointer))
  (stream-scan-string-for-writing)
  (stream-set-cursor-position)
  (stream-string-width)
  (stream-supports-input-editing)
  (stream-text-margin)
  (stream-unread-gesture)
  (stream-vertical-spacing)
  (stream-write-char)
  (stream-write-string)
  (write-buffer-and-continue))


;;; (generate-prefill-dispatch-caches 'pointer)

(prefill-dispatch-caches
  (pointer-button-state
    (standard-pointer))
  ((setf pointer-button-state)
    (t standard-pointer))
  (pointer-position
    (standard-pointer))
  ((setf pointer-position-changed)
    (t standard-pointer))
  (pointer-set-native-position
    (standard-pointer t t))
  (pointer-set-position
    (standard-pointer t t))
  (pointer-sheet
    (standard-pointer))
  ((setf pointer-sheet)
    (t standard-pointer))
  (query-pointer
    (standard-pointer)))


;;; (generate-prefill-dispatch-caches 'console)

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches 'cursor)

(prefill-dispatch-caches
  (bounding-rectangle*)
  (cursor-active)
  ((setf cursor-active))
  (cursor-focus)
  ((setf cursor-focus))
  (cursor-position)
  (cursor-set-position)
  (cursor-state)
  ((setf cursor-state))
  ((setf cursor-stream))
  (cursor-visibility)
  ((setf cursor-visibility))
  (cursor-width-and-height-pending-protocol)
  (note-cursor-change)
  (port-draw-cursor))


;;; (generate-prefill-dispatch-caches 'event)

(prefill-dispatch-caches
  (describe-object
    (pointer-button-event t))
  (dispatch-event)
  (distribute-event-1)
  (event-modifier-state
    (pointer-button-press-event)
    (key-press-event))
  (event-sheet
    (pointer-enter-event)
    (pointer-exit-event)
    (pointer-button-release-event)
    (pointer-motion-event)
    (pointer-button-press-event)
    (key-press-event))
  (handle-event)
  (silica::initialize-event
    (pointer-motion-event)
    (pointer-enter-event)
    (pointer-exit-event)
    (pointer-button-press-event)
    (pointer-button-release-event)
    (key-press-event)
    (key-release-event)
    (window-configuration-event)
    (window-repaint-event))
  (keyboard-event-character
    (key-press-event))
  (keyboard-event-key-name
    (key-press-event))
  #+Genera (clos-internals:operation-handled-p
             (pointer-button-event t)
             (pointer-button-press-event t))
  (pointer-event-button
    (pointer-button-press-event))
  (pointer-event-x
    (pointer-button-press-event)
    (pointer-button-release-event))
  (pointer-event-y
    (pointer-button-press-event)
    (pointer-button-release-event))
  (print-object
    (pointer-button-event t)
    (pointer-button-press-event t))
  #+Genera (clos-internals::print-self
             (pointer-button-event t t t)
             (pointer-button-press-event t t t))
  (queue-event)
  (receive-gesture)
  #+Genera (clos-internals::send-if-handles
             (pointer-button-event t)
             (pointer-button-press-event t))
  (slot-unbound
    (t pointer-button-event t))
  (stream-process-gesture)
  #+Genera (clos-internals::which-operations
             (pointer-button-event)
             (pointer-button-press-event)))


;;; (generate-prefill-dispatch-caches 'application-frame)

(prefill-dispatch-caches
  (accept-values-top-level
    (accept-values)
    (accept-values-own-window))
  (application-frame-p
    (accept-values-own-window))
  (command-enabled
    (t accept-values))
  (default-frame-top-level)
  (disable-frame
    (menu-frame)
    (accept-values)
    (accept-values-own-window))
  (display-exit-boxes
    (accept-values t textual-dialog-view)
    (accept-values-own-window t textual-dialog-view))
  (enable-frame
    (menu-frame)
    (accept-values-own-window))
  (execute-frame-command
    (accept-values t))
  (find-or-make-pane-named)
  (frame-command-table
    (accept-values))
  (frame-document-highlighted-presentation
    (accept-values t t t t t t))
  (frame-error-output)
  (frame-exit)
  (frame-find-innermost-applicable-presentation
    (accept-values t t t t))
  (frame-input-context-button-press-handler
    (accept-values t t))
  (frame-maintain-presentation-histories
    (accept-values)
    (accept-values-own-window))
  (frame-manager)
  (frame-panes
    (menu-frame)
    (accept-values)
    (accept-values-own-window))
  ((setf frame-panes)
    (t menu-frame)
    (t accept-values)
    (t accept-values-own-window))
  (frame-pointer-documentation-output
    (accept-values)
    (accept-values-own-window))
  (frame-pretty-name
    (menu-frame)
    (accept-values-own-window))
  (frame-properties
    (menu-frame)
    (accept-values-own-window))
  (frame-query-io)
  (frame-replay
    (accept-values t))
  ((setf frame-shell)
    (t menu-frame)
    (t accept-values-own-window))
  (frame-standard-input)
  (frame-standard-output)
  (frame-top-level-sheet
    (menu-frame)
    (accept-values)
    (accept-values-own-window))
  ((setf frame-top-level-sheet)
    (t menu-frame)
    (t accept-values-own-window))
  (frame-wrapper)
  (generate-panes)
  (get-frame-pane)
  (graft
    (menu-frame)
    (accept-values-own-window))
  (initialize-instance
    (accept-values-own-window))
  (layout-frame
    (menu-frame)
    (accept-values-own-window))
  (note-frame-disabled)
  (note-frame-enabled)
  #+Genera (clos-internals:operation-handled-p)
  (panep
    (accept-values-own-window))
  (port
    (menu-frame)
    (accept-values-own-window))
  (print-object)
  #+Genera (clos-internals::print-self)
  (read-frame-command)
  (reset-frame
    (menu-frame))
  (run-frame-top-level
    (accept-values)
    (accept-values-own-window))
  #+Genera (clos-internals::send-if-handles)
  (shared-initialize
    (accept-values-own-window t))
  #+Genera (clos-internals::which-operations))


;;; (generate-prefill-dispatch-caches 'frame-manager)

(prefill-dispatch-caches
  (adopt-frame)
  (frame-manager-dialog-view)
  (frame-manager-display-pointer-documentation)
  ((setf frame-manager-frames))
  (frame-manager-menu-choose)
  (frame-wrapper)
  (generate-panes)
  (graft)
  (make-pane-1)
  (note-frame-disabled)
  (note-frame-enabled)
  #+Genera (clos-internals:operation-handled-p)
  (port)
  (print-object)
  #+Genera (clos-internals::print-self)
  (update-frame-settings)
  #+Genera (clos-internals::which-operations))


;;; (generate-prefill-dispatch-caches 'command-table)

(prefill-dispatch-caches
  (command-present-in-command-table-p
    (t standard-command-table))
  (command-table-inherit-from
    (standard-command-table))
  ((setf command-table-inherit-from)
    (t standard-command-table))
  (command-table-name
    (standard-command-table))
  (command-table-p
    (standard-command-table)))


;;; (generate-prefill-dispatch-caches 'presentation-translator)

(prefill-dispatch-caches
  (presentation-translator-command-name
    (presentation-translator))
  (presentation-translator-from-type
    (presentation-to-command-translator)
    (presentation-translator))
  (presentation-translator-function
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-gesture-name
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-menu
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-name
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-pointer-documentation
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-priority
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-tester
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-tester-definitive
    (presentation-translator)
    (presentation-to-command-translator))
  (presentation-translator-to-type
    (presentation-to-command-translator)
    (presentation-translator)))


;;; (generate-prefill-dispatch-caches 'view)

(prefill-dispatch-caches
  (accept-method
    ((presentation-type command) t t t t textual-view)
    ((presentation-type command-name) t t t t textual-view)
    ((presentation-type string) t t t t textual-dialog-view)
    ((presentation-type string) t t t t textual-view)
    ((presentation-type integer) t t t t textual-dialog-view)
    ((presentation-type integer) t t t t textual-view)
    ((presentation-type number) t t t t textual-dialog-view)
    ((presentation-type pathname) t t t t textual-dialog-view))
  (accept-present-default-method
    ((presentation-type boolean) t t t t textual-dialog-view t t t t)
    ((presentation-type completion) t t t t textual-dialog-view t t t t))
  (display-exit-boxes)
  (present-method
    ((presentation-type command-menu-element) t t t t t textual-menu-view)
    ((presentation-type command-menu-element) t t t t t textual-view)
    ((presentation-type command-name) t t t t t textual-view)
    ((presentation-type command) t t t t t pointer-documentation-view)
    ((presentation-type command) t t t t t textual-view)
    ((presentation-type integer) t t t t t pointer-documentation-view)
    ((presentation-type integer) t t t t t textual-dialog-view)
    ((presentation-type integer) t t t t t textual-view)
    ((presentation-type string) t t t t t pointer-documentation-view)
    ((presentation-type string) t t t t t textual-dialog-view)
    ((presentation-type string) t t t t t textual-view)
    ((presentation-type number) t t t t t textual-dialog-view)
    ((presentation-type boolean) t t t t t textual-dialog-view)
    ((presentation-type completion) t t t t t textual-dialog-view)
    ((presentation-type pathname) t t t t t textual-view)
    ((presentation-type pathname) t t t t t textual-dialog-view))
  (prompt-for-accept))


;;; (generate-prefill-dispatch-caches 'accept-values-query)

(prefill-dispatch-caches
  (accept-values-query-active-p
    (accept-values-query))
  ((setf accept-values-query-active-p)
    (t accept-values-query))
  (accept-values-query-changed-p
    (accept-values-query))
  ((setf accept-values-query-changed-p)
    (t accept-values-query))
  (accept-values-query-edit-value
    (accept-values-query t))
  ((setf accept-values-query-presentation)
    (t accept-values-query))
  (accept-values-query-type
    (accept-values-query))
  (accept-values-query-value
    (accept-values-query))
  ((setf accept-values-query-value)
    (t accept-values-query)))


;;; (generate-prefill-dispatch-caches 'basic-history)

(prefill-dispatch-caches
  (history-element
    (kill-ring-history t))
  (history-element-visible-p
    (kill-ring-history t))
  (history-elements-equal
    (kill-ring-history t t)
    (presentation-history t t))
  (history-replace-input)
  (history-top-element
    (kill-ring-history)
    (presentation-history))
  ((setf history-top-element)
    (t kill-ring-history))
  (invoke-with-default-bound-in-history
    (presentation-history t t))
  #+Genera (clos-internals:operation-handled-p
             (presentation-history t))
  (presentation-history-type
    (presentation-history))
  (print-object
    (presentation-history t))
  #+Genera (clos-internals::print-self
             (presentation-history t t t))
  (push-history-element
    (kill-ring-history t)
    (presentation-history t))
  #+Genera (clos-internals::which-operations
             (presentation-history))
  (yank-from-history
    (kill-ring-history)))


;;; (generate-prefill-dispatch-caches 'noise-string)

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches 'io-buffer)

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches 'queue)

(prefill-dispatch-caches
  #+Genera (clos-internals:operation-handled-p
             (queue t))
  (print-object
    (queue t))
  #+Genera (clos-internals::print-self
             (queue t t t))
  (queue-contents-type
    (queue))
  (queue-empty-p
    (queue))
  (queue-get
    (queue))
  (queue-next
    (queue))
  (queue-put
    (queue t))
  (queue-unget
    (queue t))
  #+Genera (clos-internals::which-operations
             (queue)))


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'command))

(prefill-dispatch-caches
  (accept-method)
  (describe-presentation-type-method
    ((presentation-type command) t t t t t))
  (highlight-presentation-method
    ((presentation-type command) t t t t t t))
  (present-method)
  (presentation-subtypep-method
    ((presentation-type command) t t))
  (presentation-type-history-method
    ((presentation-type command) t t))
  (presentation-type-specifier-p-method
    ((presentation-type command) t t t))
  (presentation-typep-method
    ((presentation-type command) t t t)))


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'command-name))

(prefill-dispatch-caches
  (accept-method)
  (present-method)
  (presentation-type-specifier-p-method
    ((presentation-type command-name) t t t))
  (presentation-typep-method
    ((presentation-type command-name) t t t)))


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'command-arguments))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'keyword-argument-name))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'command-or-form))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'expression))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'form))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'command-menu-element))

(prefill-dispatch-caches
  (highlight-presentation-method
    ((presentation-type command-menu-element) t t t t t t))
  (present-method))


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'menu-item))

(prefill-dispatch-caches
  (highlight-presentation-method
    ((presentation-type menu-item) t t t t t t)))


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'completion))

(prefill-dispatch-caches
  (accept-present-default-method)
  (present-method)
  (presentation-default-preprocessor-method
    ((presentation-type completion) t t))
  (presentation-type-history-method
    ((presentation-type completion) t t))
  (presentation-type-specifier-p-method
    ((presentation-type completion) t t t)))


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'subset-completion))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'sequence))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'null))

(prefill-dispatch-caches)


;;; (generate-prefill-dispatch-caches (find-presentation-type-class 'blank-area))

(prefill-dispatch-caches)


;;; Compile constructors for all sorts of instantiable classes

#+++ignore        ;this just doesn't seem to do any good
(ensure-constructors-compiled
  accept-values
  accept-values-command-button
  accept-values-output-record
  accept-values-own-window
  accept-values-pane
  accept-values-query
  accept-values-stream
  application-pane
  border-output-record
  border-pane
  check-box
  check-box-pane
  clim-stream-pane
  command-menu-pane
  contrasting-ink
  directed-graph-output-record
  drag-and-drop-translator
  ellipse-output-record
  filling-stream
  flipping-ink
  gadget-dialog-view
  gadget-menu-view
  gadget-output-record
  gadget-view
  silica::general-space-requirement
  generic-label-pane
  generic-scroller-pane
  graph-node-table
  gray-color
  hbox-pane
  identity-transformation
  ihs-color
  indenting-output-record
  interactor-pane
  key-press-event
  key-release-event
  kill-ring-history
  label-pane
  line-output-record
  lines-output-record
  locking-queue
  menu-bar
  menu-bar-button
  menu-bar-pane
  menu-button
  menu-button-pane
  silica::null-space-requirement
  outlined-pane
  pattern
  pixmap-stream
  point-output-record
  pointer-button-press-event
  pointer-button-release-event
  pointer-documentation-pane
  pointer-enter-event
  pointer-exit-event
  pointer-motion-event
  points-output-record
  polygon-output-record
  presentation-event
  presentation-history
  presentation-to-command-translator
  presentation-translator
  progress-note
  pull-down-menu
  pull-down-menu-button
  push-button
  push-button-pane
  queue
  radio-box
  radio-box-pane
  rectangle-output-record
  rectangles-output-record
  rectangular-tile
  rgb-color
  scroll-bar
  scroll-bar-pane
  scroll-bar-shaft-pane
  scroll-bar-target-pane
  scroller-pane
  silica::simple-space-requirement
  slider
  slider-pane
  spacing-pane
  standard-application-frame
  standard-bounding-rectangle
  standard-cell-output-record
  standard-column-output-record
  standard-command-table
  standard-encapsulating-stream
  standard-frame-manager
  standard-graft
  standard-graph-node-output-record
  standard-input-editing-stream
  standard-item-list-output-record
  standard-line-style
  standard-nonsensitive-presentation
  standard-opacity
  standard-point
  standard-pointer
  standard-presentation
  standard-rectangle-set
  standard-row-output-record
  standard-sequence-output-history
  standard-sequence-output-record
  standard-table-output-record
  standard-text-cursor
  standard-text-output-record
  standard-text-style
  standard-transformation
  standard-tree-output-history
  standard-tree-output-record
  standard-updating-output-record
  stencil
  styled-text-output-record
  table-pane
  text-output-record
  textual-dialog-view
  textual-menu-view
  textual-view
  toggle-button
  toggle-button-pane
  top-level-sheet
  translation-transformation
  tree-graph-output-record
  vbox-pane
  viewport
  window-configuration-event
  window-repaint-event)
